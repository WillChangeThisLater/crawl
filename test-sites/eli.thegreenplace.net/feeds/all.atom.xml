<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eli Bendersky's website</title><link href="https://eli.thegreenplace.net/" rel="alternate"></link><link href="https://eli.thegreenplace.net/feeds/all.atom.xml" rel="self"></link><id>https://eli.thegreenplace.net/</id><updated>2024-07-30T21:35:34-07:00</updated><entry><title>Building static binaries with Go on Linux</title><link href="https://eli.thegreenplace.net/2024/building-static-binaries-with-go-on-linux/" rel="alternate"></link><published>2024-07-30T14:35:00-07:00</published><updated>2024-07-30T21:35:34-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-07-30:/2024/building-static-binaries-with-go-on-linux/</id><summary type="html">&lt;p&gt;One of Go's advantages is being able to produce statically-linked
binaries &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. This doesn't mean that Go always produces such binaries by default,
however; in some scenarios it requires extra work to make this happen.
Specifics here are OS-dependent; here we focus on Unix systems.&lt;/p&gt;
&lt;div class="section" id="basics-hello-world"&gt;
&lt;h2&gt;Basics - hello world&lt;/h2&gt;
&lt;p&gt;This post â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;One of Go's advantages is being able to produce statically-linked
binaries &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;. This doesn't mean that Go always produces such binaries by default,
however; in some scenarios it requires extra work to make this happen.
Specifics here are OS-dependent; here we focus on Unix systems.&lt;/p&gt;
&lt;div class="section" id="basics-hello-world"&gt;
&lt;h2&gt;Basics - hello world&lt;/h2&gt;
&lt;p&gt;This post goes over a series of experiments: we take simple programs and use
&lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; to produce binaries on a Linux machine. We then examine whether
the produced binary is statically or dynamically linked. The first example is
a simple &amp;quot;hello, world&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After building it with &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt;, we get a binary. There are a few ways on
Linux to determine whether a binary is statically or dynamically linked. One
is the &lt;tt class="docutils literal"&gt;file&lt;/tt&gt; tool:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ file ./helloworld
helloworld: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, Go BuildID=Flm7stIXKLPfvBhTgXmR/PPwdjFUEkc9NCSPRC7io/PofU_qoulSqJ0Ktvgx5g/eQXbAL15zCEIXOBSPZgY, with debug_info, not stripped
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see it says &amp;quot;statically linked&amp;quot;. Another way is to use &lt;tt class="docutils literal"&gt;ldd&lt;/tt&gt;, which
prints the shared object dependencies of a given binary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ldd ./helloworld
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively, we can also use the ubiquitous &lt;tt class="docutils literal"&gt;nm&lt;/tt&gt; tool, asking it to list the
undefined symbols in a binary (these are symbols the binary expects the dynamic
linker to provide at run-time from shared objects):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nm -u ./helloworld
&amp;lt;empty output&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All of these tell us that a simple &lt;tt class="docutils literal"&gt;helloworld&lt;/tt&gt; is a statically-linked binary.
Throughout the post I'll mostly be using &lt;tt class="docutils literal"&gt;ldd&lt;/tt&gt; (out of habit), but you can
use any approach you like.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dns-and-user-groups"&gt;
&lt;h2&gt;DNS and user groups&lt;/h2&gt;
&lt;p&gt;There are two pieces of functionality the Go standard library defers to the
system's &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; on Unix machines, when some conditions are met. When cgo
is enabled (as it often - but not always - is on Unix machines), Go will call
the C library for DNS lookups in the &lt;tt class="docutils literal"&gt;net&lt;/tt&gt; package and for user and group
ID lookups in the &lt;tt class="docutils literal"&gt;os/user&lt;/tt&gt; package.&lt;/p&gt;
&lt;p&gt;Let's observe this with an experiment:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;net&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;net&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;LookupHost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;go.dev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we build this program, we notice it's &lt;em&gt;dynamically&lt;/em&gt; linked, expecting to
load a &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; shared object at run-time:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build lookuphost.go
$ ldd ./lookuphost
  linux-vdso.so.1 (0x00007b50cb22a000)
  libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007b50cae00000)
  /lib64/ld-linux-x86-64.so.2 (0x00007b50cb22c000)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is explained in the &lt;a class="reference external" href="https://pkg.go.dev/net#hdr-Name_Resolution"&gt;net package documentation&lt;/a&gt; in some detail. The Go
standard library does have a pure Go implementation of this functionality
(although it may lack some advanced features). We can ask the toolchain to use
it in a couple of ways. First, we can set the &lt;tt class="docutils literal"&gt;netgo&lt;/tt&gt; build tag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build -tags netgo lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Second, we can disable cgo entirely with the &lt;tt class="docutils literal"&gt;CGO_ENABLED&lt;/tt&gt; env var. This env
var is usually on by default on Unix systems:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go env CGO_ENABLED
1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we disable it explicitly for our build, we'll get a static binary again:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CGO_ENABLED=0 go build lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Similarly, some of the functionality of the &lt;tt class="docutils literal"&gt;os/user&lt;/tt&gt; package uses &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt;
by default. Here's an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;encoding/json&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;os&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;os/user&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Lookup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;bob&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;je&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;json&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewEncoder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;os&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Stdout&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;je&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This produces a dynamically-linked binary:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build userlookup.go
$ ldd ./userlookup
  linux-vdso.so.1 (0x0000708301084000)
  libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x0000708300e00000)
  /lib64/ld-linux-x86-64.so.2 (0x0000708301086000)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As with &lt;tt class="docutils literal"&gt;net&lt;/tt&gt;, we can ask the Go toolchain to use the pure Go implementation
of this user lookup functionality. The build tag for this is &lt;tt class="docutils literal"&gt;osusergo&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build -tags osusergo userlookup.go
$ ldd ./userlookup
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Or, we can disable cgo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CGO_ENABLED=0 go build userlookup.go
$ ldd ./userlookup
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="linking-c-into-our-go-binary"&gt;
&lt;h2&gt;Linking C into our go binary&lt;/h2&gt;
&lt;p&gt;We've seen that the standard library has some functionality that may require
dynamic linking by default, but this is relatively easy to override. What
happens when we actually have C code as part of our Go program, though?&lt;/p&gt;
&lt;p&gt;Go supports C extensions and FFI using &lt;a class="reference external" href="https://pkg.go.dev/cmd/cgo"&gt;cgo&lt;/a&gt;.
For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// #include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// void helloworld() {&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;//   printf(&amp;quot;hello, world from C\n&amp;quot;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="c1"&gt;// }&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;helloworld&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A program built from this source will be dynamically linked, due to cgo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go build cstdio.go
$ ldd ./cstdio
  linux-vdso.so.1 (0x00007bc6d68e3000)
  libc.so.6 =&amp;gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007bc6d6600000)
  /lib64/ld-linux-x86-64.so.2 (0x00007bc6d68e5000)
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our C code, &lt;tt class="docutils literal"&gt;printf&lt;/tt&gt; is a call to &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt;; even if we don't explicitly
call into the C runtime in our C code, cgo may do it in the scaffolding code
it generates.&lt;/p&gt;
&lt;p&gt;Note that cgo may be involved even if your project has no C code of its own;
several dependencies may bring in cgo. Some popular packages - like the
&lt;a class="reference external" href="https://pkg.go.dev/github.com/mattn/go-sqlite3"&gt;go-sqlite3&lt;/a&gt; driver - depend
on cgo, and importing them will impose a cgo requirement on a program.&lt;/p&gt;
&lt;p&gt;Obviously, building with &lt;tt class="docutils literal"&gt;CGO_ENABLED=0&lt;/tt&gt; is no longer an option.
So what's the recourse?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="linking-a-libc-statically"&gt;
&lt;h2&gt;Linking a &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; statically&lt;/h2&gt;
&lt;p&gt;To recap, once we have C code as part of our Go binary, it's going to be
dynamically linked on Unix, because:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;The C code calls into &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; (the C runtime)&lt;/li&gt;
&lt;li&gt;The &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; typically used on Unix systems is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Glibc"&gt;glibc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The recommended way to link to &lt;tt class="docutils literal"&gt;glibc&lt;/tt&gt; is dynamically (for various
technical and license-related reasons that are outside the scope of this
post)&lt;/li&gt;
&lt;li&gt;Therefore, &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; produces dynamically-linked Go binaries&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To change this flow of events, we can interpose at step (2) - use a &lt;em&gt;different&lt;/em&gt;
&lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; implementation, one that's statically linked. Luckily, such an
implementation exists and is well used and tested - &lt;a class="reference external" href="https://wiki.musl-libc.org/"&gt;musl&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To follow along, start by installing musl. The standard instructions using
&lt;tt class="docutils literal"&gt;./configure &lt;span class="pre"&gt;--prefix=&amp;lt;MUSLDIR&amp;gt;&lt;/span&gt;&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;make&lt;/tt&gt; / &lt;tt class="docutils literal"&gt;make install&lt;/tt&gt; work well.
We'll use &lt;tt class="docutils literal"&gt;$MUSLDIR&lt;/tt&gt; to refer to the directory where musl is installed.
musl comes with a &lt;tt class="docutils literal"&gt;gcc&lt;/tt&gt; wrapper that makes it easy to pass all the right
flags. To re-build our &lt;tt class="docutils literal"&gt;cstdio&lt;/tt&gt; example using musl, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CC=$MUSLDIR/bin/musl-gcc go build --ldflags &amp;#39;-linkmode external -extldflags &amp;quot;-static&amp;quot;&amp;#39; cstdio.go
$ ldd ./cstdio
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;CC&lt;/tt&gt; env var tells &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; which C compiler to use for cgo; the
linker flags instruct it to use an external linker for the final build
(&lt;a class="reference external" href="https://cs.opensource.google/go/go/+/refs/tags/go1.22.0:src/cmd/cgo/doc.go;l=830"&gt;read this for the gory details&lt;/a&gt;)
and then to perform a static link.&lt;/p&gt;
&lt;p&gt;This approach works for more complex use cases as well! I won't paste the code
here, but the &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-static-linking"&gt;sample repository accompanying this post&lt;/a&gt; has a file
called &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;use-sqlite.go&lt;/span&gt;&lt;/tt&gt;; it uses the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;go-sqlite3&lt;/span&gt;&lt;/tt&gt; package. Try
&lt;tt class="docutils literal"&gt;go build&lt;/tt&gt;-ing it normally and observe the dynamically linked binary produced;
next, try to build it with the flags shown above to use musl, and observe
that the produced binary will be statically linked.&lt;/p&gt;
&lt;p&gt;Another curious tidbit is that we now have another way to build a statically-linked
&lt;tt class="docutils literal"&gt;lookuphost&lt;/tt&gt; program - by linking it with musl:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CC=$MUSLDIR/bin/musl-gcc go build --ldflags &amp;#39;-linkmode external -extldflags &amp;quot;-static&amp;quot;&amp;#39; lookuphost.go
$ ldd ./lookuphost
  not a dynamic executable
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we didn't provide &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-tags&lt;/span&gt; netgo&lt;/tt&gt; and didn't disable cgo, the Go toolchain
uses calls into &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; to implement DNS lookup; however, since these calls
end up in the statically-linked musl, the final binary is statically linked!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-zig-as-our-c-compiler"&gt;
&lt;h2&gt;Using Zig as our C compiler&lt;/h2&gt;
&lt;p&gt;Another alternative emerged recently to achieve what we want: using the Zig
toolchain. &lt;a class="reference external" href="https://ziglang.org/"&gt;Zig&lt;/a&gt; is a new systems programming language,
which uses a bundled toolchain approach similar to Go. Its toolchain bundles
together a Zig compiler, C/C++ compiler, linker and &lt;tt class="docutils literal"&gt;libc&lt;/tt&gt; for static linking.
Therefore, Zig can actually be used to link Go binaries statically with C code!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Instead&lt;/em&gt; of installing musl, we could instead install Zig and use its
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;x86_64-linux-musl&lt;/span&gt;&lt;/tt&gt; target (adjust the architecture if needed). This is
done by pointing to the &lt;tt class="docutils literal"&gt;zig&lt;/tt&gt; binary as our &lt;tt class="docutils literal"&gt;CC=&lt;/tt&gt; env var; assuming Zig
is installed in &lt;tt class="docutils literal"&gt;$ZIGDIR&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ CC=&amp;quot;$ZIGDIR/zig cc -target x86_64-linux-musl&amp;quot; go build cstdio.go
$ CC=&amp;quot;$ZIGDIR/zig cc -target x86_64-linux-musl&amp;quot; go build use-sqlite.go
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These will produce statically-linked Go binaries; the &lt;tt class="docutils literal"&gt;zig&lt;/tt&gt; driver takes
care of setting the right linker flags automatically, so the command-line ends
up being slightly simpler than invoking &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;musl-gcc&lt;/span&gt;&lt;/tt&gt;. Another advantage of Zig
here is that enables cross-compilation of Go programs that include C code &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I did find some issues with this approach, however; for example, attempting to
link the &lt;tt class="docutils literal"&gt;lookuphost.go&lt;/tt&gt; sample fails with a slew of linker errors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Making sure Go produces a statically-linked binary on Linux takes a little
bit of effort, but works well overall.&lt;/p&gt;
&lt;p&gt;There's a &lt;a class="reference external" href="https://github.com/golang/go/issues/26492"&gt;long standing accepted proposal&lt;/a&gt;
about adding a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-static&lt;/span&gt;&lt;/tt&gt; flag to &lt;tt class="docutils literal"&gt;go build&lt;/tt&gt; that would take care of setting
up all the flags required for a static build. AFAICT, the proposal is just
waiting for someone with enough grit and dedication to implement and test it
in all the interesting scenarios.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="code"&gt;
&lt;h2&gt;Code&lt;/h2&gt;
&lt;p&gt;The code for all the experiments described in this post
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-static-linking"&gt;is available on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;A &lt;em&gt;statically-linked&lt;/em&gt; binary doesn't have run-time dependencies on
other libraries (typically in the form of shared objects), not even
the C runtime library (&lt;tt class="docutils literal"&gt;libc&lt;/tt&gt;). I wrote much more about this topic
&lt;a class="reference external" href="https://eli.thegreenplace.net/2012/08/13/how-statically-linked-programs-run-on-linux"&gt;in the past&lt;/a&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Go is well-known for its cross-compilation capabilities, but it
depends on the C toolchain to compile C code. Therefore, when cgo is
involved, cross-compilation is challenging. Zig can help with this
because &lt;em&gt;its&lt;/em&gt; toolchain supports cross compilation for Zig &lt;em&gt;and&lt;/em&gt; C! It
does so by bundling LLVM with a bunch of targets linked in.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Compilation"></category><category term="Linkers and Loaders"></category><category term="Linux"></category></entry><entry><title>Notes on Taylor and Maclaurin series</title><link href="https://eli.thegreenplace.net/2024/notes-on-taylor-and-maclaurin-series/" rel="alternate"></link><published>2024-07-23T18:55:00-07:00</published><updated>2024-07-24T01:55:31-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-07-23:/2024/notes-on-taylor-and-maclaurin-series/</id><summary type="html">&lt;p&gt;A Maclaurin series is a power series - a polynomial with carefully selected
coefficients and an infinite number of terms - used to approximate arbitrary
functions with some conditions (e.g. differentiability). The Maclaurin series
does this for input values close to 0, and is a special case of the Taylor
series â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;A Maclaurin series is a power series - a polynomial with carefully selected
coefficients and an infinite number of terms - used to approximate arbitrary
functions with some conditions (e.g. differentiability). The Maclaurin series
does this for input values close to 0, and is a special case of the Taylor
series which can be used to find a polynomial approximation around any value.&lt;/p&gt;
&lt;div class="section" id="intuition"&gt;
&lt;h2&gt;Intuition&lt;/h2&gt;
&lt;p&gt;Let's say we have a function &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; and we want to approximate it with
some other - polynomial - function &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7f86e6c6bb632c1ca2518f269fc1cc1b6737d4f7.svg" style="height: 19px;" type="image/svg+xml"&gt;p(x)&lt;/object&gt;. To make sure that &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7f86e6c6bb632c1ca2518f269fc1cc1b6737d4f7.svg" style="height: 19px;" type="image/svg+xml"&gt;p(x)&lt;/object&gt;
is as close as possible to &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt;, we'll create a function that has
similar derivatives to &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;We start with a constant polynomial, such that &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/012caf9ca6f5f20d23916c2628ebef524cefeed7.svg" style="height: 19px;" type="image/svg+xml"&gt;p(0)=f(0)&lt;/object&gt;. This
approximation is perfect at 0 itself, but not as much elsewhere.&lt;/li&gt;
&lt;li&gt;We want &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7f86e6c6bb632c1ca2518f269fc1cc1b6737d4f7.svg" style="height: 19px;" type="image/svg+xml"&gt;p(x)&lt;/object&gt; to behave similarly to &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; around 0, so we'll
set the derivative of our approximation to be the same as the derivative
of &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; at 0; in other words &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/210f8d24ca46f8afef927a302d65117bea405af9.svg" style="height: 19px;" type="image/svg+xml"&gt;p&amp;#x27;(0)=f&amp;#x27;(0)&lt;/object&gt;. This approximation
will be decent &lt;em&gt;very&lt;/em&gt; close to 0 (at least in the direction of the slope),
but will become progressively worse as we get farther away from 0.&lt;/li&gt;
&lt;li&gt;We continue this process, by setting the second derivative to be
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/cf52e0957b8105e96f4a7d58c94212757571f4cf.svg" style="height: 19px;" type="image/svg+xml"&gt;p&amp;#x27;&amp;#x27;(0)=f&amp;#x27;&amp;#x27;(0)&lt;/object&gt;, the third derivative to be &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/54583c50b4c7db87eb9546ee7bf42dbfddac2777.svg" style="height: 19px;" type="image/svg+xml"&gt;p&amp;#x27;&amp;#x27;&amp;#x27;(0)=f&amp;#x27;&amp;#x27;&amp;#x27;(0)&lt;/object&gt;
and so on, for as many terms as we need to achieve a good approximation in
our desired range. Intuitively, if many derivatives of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7f86e6c6bb632c1ca2518f269fc1cc1b6737d4f7.svg" style="height: 19px;" type="image/svg+xml"&gt;p(x)&lt;/object&gt; are
identical to the corresponding derivatives of &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; at some point,
the two functions will have very similar behaviors around that point &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The full Maclaurin series that accomplishes this approximation is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/766aa8a11f2b92dd363c0dab88fff5eb333165bd.svg" style="height: 50px;" type="image/svg+xml"&gt;\[p(x) = f(0)+\frac{f&amp;#x27;(0)}{1!}x+\frac{f&amp;#x27;&amp;#x27;(0)}{2!}x^2+\frac{f&amp;#x27;&amp;#x27;&amp;#x27;(0)}{3!}x^3+\cdots=\sum_{n=0}^{\infty} \frac{f^{(n)}(0)}{n!}x^n\]&lt;/object&gt;
&lt;p&gt;We'll get to how this equation is found in a moment, but first an example that
demonstrates its approximation capabilities. Suppose we want to find a polynomial
approximation for &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a70fbea75540fef14e8ab2c910d8f9616c5e9f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(x)=cos(x)&lt;/object&gt;. Following the definition of the Maclaurin
series, it's easy to calculate:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/359e30713a5e6accabbfb43c37c2798cd451df02.svg" style="height: 39px;" type="image/svg+xml"&gt;\[p_{cos}(x)=1-\frac{x^2}{2!}+\frac{x^4}{4!}-\frac{x^6}{6!}+\frac{x^8}{8!}-\cdots\]&lt;/object&gt;
&lt;p&gt;(try it as an exercise).&lt;/p&gt;
&lt;img alt="Successive approximation of cos(x) with Maclaurin series" class="align-center" src="https://eli.thegreenplace.net/images/2024/maclaurin-cos.png" /&gt;
&lt;p&gt;The dark blue line is the cosine function &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a70fbea75540fef14e8ab2c910d8f9616c5e9f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(x)=cos(x)&lt;/object&gt;. The light blue
lines are successive approximations, with &lt;em&gt;k&lt;/em&gt; terms of the power series
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/c739a406062fd6fb971e3f322a30a0f603757e25.svg" style="height: 19px;" type="image/svg+xml"&gt;p_{cos}(x)&lt;/object&gt; included:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;With &lt;em&gt;k=1&lt;/em&gt;, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/ec45f9d0f46db99de6b7864c09d9f22b462d11e6.svg" style="height: 19px;" type="image/svg+xml"&gt;p_{cos}(x)=1&lt;/object&gt; since that's just the value of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt; at 0.&lt;/li&gt;
&lt;li&gt;With &lt;em&gt;k=2&lt;/em&gt;, &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/dee962f0d6f639c30a4c02d2063fa6679fff3120.svg" style="height: 25px;" type="image/svg+xml"&gt;p_{cos}(x)=1-\frac{x^2}{2}&lt;/object&gt;, and indeed the line looks parabolic&lt;/li&gt;
&lt;li&gt;With &lt;em&gt;k=3&lt;/em&gt; we get a 4th degree polynomial which tracks the function better,
and so on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With more terms in the power series, the approximation resembles
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt; more and more, at least close to 0. The farther away we get from
0, the more terms we need for a good approximation &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-the-maclaurin-series-works"&gt;
&lt;h2&gt;How the Maclaurin series works&lt;/h2&gt;
&lt;p&gt;This section shows how one arrives at the formula for the Maclaurin series,
and connects it to the intuition of equating derivatives.&lt;/p&gt;
&lt;p&gt;We'll start by observing that the Maclaurin series is developed around 0 for
a good reason. The generalized form of a power series is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/17143ce86a9aa99908cc5ef88840f3a46a6e6216.svg" style="height: 22px;" type="image/svg+xml"&gt;\[p(x)=a_0+a_1 x+a_2 x^2 + a_3 x^3 + a_4 x^4 + \cdots\]&lt;/object&gt;
&lt;p&gt;To properly approximate a function, we need this series to &lt;em&gt;converge&lt;/em&gt;; therefore,
it would be desirable for its terms to decrease. An &lt;em&gt;x&lt;/em&gt; value close to zero
guarantees that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/a297bb91c9703af1975402dded3ab9b7e6431dde.svg" style="height: 12px;" type="image/svg+xml"&gt;x^n&lt;/object&gt; becomes smaller and smaller with each successive
term. There's a whole section on convergence further down with more details.&lt;/p&gt;
&lt;p&gt;Recall from the &lt;em&gt;Intuition&lt;/em&gt; section that we're looking for a polynomial that
passes through the same point as &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; at 0, and that has derivatives
equal to those of &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; at that point.&lt;/p&gt;
&lt;p&gt;Let's calculate a few of the first derivatives of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7f86e6c6bb632c1ca2518f269fc1cc1b6737d4f7.svg" style="height: 19px;" type="image/svg+xml"&gt;p(x)&lt;/object&gt;; the function
itself can be considered as the 0-th derivative:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/305bdd6918c39e9b7fa95191f323ee811e744907.svg" style="height: 124px;" type="image/svg+xml"&gt;\[\begin{align*}
 p(x)&amp;amp;=a_0+a_1 x+a_2 x^2 + a_3 x^3+ a_4 x^4+\cdots\\
 p&amp;#x27;(x)&amp;amp;= a_1 +2 a_2 x + 3 a_3 x^2+4 a_4 x^3+\cdots\\
 p&amp;#x27;&amp;#x27;(x)&amp;amp;= 2 a_2 + 3 \cdot 2 a_3 x+ 4 \cdot 3 x^2+\cdots\\
 p&amp;#x27;&amp;#x27;&amp;#x27;(x)&amp;amp;= 3\cdot 2 a_3 + 4\cdot 3 \cdot 2 x+\cdots \\
 \cdots
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Now, equate these to corresponding derivatives of &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; at &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/8bdf21367eee06097384c37b0448375f07f950f0.svg" style="height: 12px;" type="image/svg+xml"&gt;x=0&lt;/object&gt;.
All the non-constant terms drop out, and we're left with:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/73ca5017e4342b3dc099f9895f78b58cb7eb486d.svg" style="height: 175px;" type="image/svg+xml"&gt;\[\begin{align*}
 f(0)&amp;amp;=p(0)=a_0\\
 f&amp;#x27;(0)&amp;amp;=p&amp;#x27;(0)= a_1 \\
 f&amp;#x27;&amp;#x27;(0)&amp;amp;=p&amp;#x27;&amp;#x27;(0)= 2 a_2 \\
 f&amp;#x27;&amp;#x27;&amp;#x27;(0)&amp;amp;=p&amp;#x27;&amp;#x27;&amp;#x27;(0)= 3\cdot 2 a_3 \\
 \cdots\\
 f^{(n)}(0)&amp;amp;=p^{(0)}(0)=n!a_n\\
 \cdots\\
\end{align*}\]&lt;/object&gt;
&lt;p&gt;So we can set the coefficients of the power series, generalizing the
denominators using factorials:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/37d903463af52a2e233564a101a6ee25cf5dd85c.svg" style="height: 228px;" type="image/svg+xml"&gt;\[\begin{align*}
 a_0 &amp;amp;= f(0)\\
 a_1 &amp;amp;= \frac{f&amp;#x27;(0)}{1!}\\
 a_2 &amp;amp;= \frac{f&amp;#x27;&amp;#x27;(0)}{2!}\\
 a_3 &amp;amp;= \frac{f&amp;#x27;&amp;#x27;&amp;#x27;(0)}{3!}\\
 \cdots \\
 a_n &amp;amp;= \frac{f^{(n)}(0)}{n!}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Which gives us the definition of the Maclaurin series:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/766aa8a11f2b92dd363c0dab88fff5eb333165bd.svg" style="height: 50px;" type="image/svg+xml"&gt;\[p(x) = f(0)+\frac{f&amp;#x27;(0)}{1!}x+\frac{f&amp;#x27;&amp;#x27;(0)}{2!}x^2+\frac{f&amp;#x27;&amp;#x27;&amp;#x27;(0)}{3!}x^3+\cdots=\sum_{n=0}^{\infty} \frac{f^{(n)}(0)}{n!}x^n\]&lt;/object&gt;
&lt;/div&gt;
&lt;div class="section" id="taylor-series"&gt;
&lt;h2&gt;Taylor series&lt;/h2&gt;
&lt;p&gt;The Maclaurin series is suitable for finding approximations for functions
around 0; what if we want to approximate a function around a different value?
First, let's see why we would even want that. A couple of major reasons come
to mind:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;We have a non-cyclic function and we're really interested in approximating
it around some specific value of &lt;em&gt;x&lt;/em&gt;; if we use Maclaurin series, we
get a good approximation around 0, but its quality is diminishing the
farther away we get. We may be able to use much fewer terms for a good
approximation if we start it around our target value.&lt;/li&gt;
&lt;li&gt;The function we're approximating is not well behaved around 0.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It's the second reason which is most common, at least in calculus. By &amp;quot;not well
behaved&amp;quot; I mean a function that's not finite at 0 (or close to it), or that
isn't differentiable at that point, or whose derivatives aren't finite.&lt;/p&gt;
&lt;p&gt;There's a very simple and common example of such a function - the natural
logarithm &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/86d082e11ec9c0d5b2a4df154c6b4a0755b4b512.svg" style="height: 19px;" type="image/svg+xml"&gt;ln(x)&lt;/object&gt;. This function is undefined at 0 (it approaches
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/18787d835dea1ca698e365c252f82b506cecfce7.svg" style="height: 8px;" type="image/svg+xml"&gt;-\infty&lt;/object&gt;). Moreover, its derivatives are:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/1220eae393ca586b7f501bdd2f4887701cdcf9e9.svg" style="height: 223px;" type="image/svg+xml"&gt;\[\begin{align*}
 ln&amp;#x27;(x)&amp;amp;= \frac{1}{x}\\
 ln&amp;#x27;&amp;#x27;(x)&amp;amp;= -\frac{1}{x^2}\\
 ln&amp;#x27;&amp;#x27;&amp;#x27;(x)&amp;amp;= \frac{2}{x^3}\\
 ln^{(4)}(x)&amp;amp;= -\frac{6}{x^4}\\
 ln^{(5)}(x)&amp;amp;= \frac{24}{x^5}\\
 \cdots
\end{align*}\]&lt;/object&gt;
&lt;p&gt;&lt;em&gt;None&lt;/em&gt; of these is defined at 0 either! The Maclaurin series won't work here,
and we'll have to turn to its generalization - the Taylor series:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/d901c7af02dad6f8fefe97711dd287ccf8bb7bf4.svg" style="height: 50px;" type="image/svg+xml"&gt;\[p(x) = f(a)+\frac{f&amp;#x27;(a)}{1!}(x-a)+\frac{f&amp;#x27;&amp;#x27;(a)}{2!}(x-a)^2+\frac{f&amp;#x27;&amp;#x27;&amp;#x27;(a)}{3!}(x-a)^3+\cdots=\sum_{n=0}^{\infty} \frac{f^{(n)}(a)}{n!}(x-a)^n\]&lt;/object&gt;
&lt;p&gt;This is a power series that provides an approximation for &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; around
any point &lt;em&gt;a&lt;/em&gt; where &lt;img alt="f(x)" class="valign-m4" src="https://eli.thegreenplace.net/images/math/3e03f4706048fbc6c5a252a85d066adf107fcc1f.png" style="height: 18px;" /&gt; is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Smoothness"&gt;finite and differentiable&lt;/a&gt;. It's easy to use exactly the
same technique to develop this series as we did for Maclaurin.&lt;/p&gt;
&lt;p&gt;Let's use this to approximate &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/86d082e11ec9c0d5b2a4df154c6b4a0755b4b512.svg" style="height: 19px;" type="image/svg+xml"&gt;ln(x)&lt;/object&gt; around &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/7caf6056913504f0508c65faf2dc3f94ff65bcfd.svg" style="height: 12px;" type="image/svg+xml"&gt;x=1&lt;/object&gt;, where this
function is well behaved. &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/597f6fdf6538b7be50426035591ea5ca5b157af3.svg" style="height: 19px;" type="image/svg+xml"&gt;ln(1)=0&lt;/object&gt; and substituting &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/7caf6056913504f0508c65faf2dc3f94ff65bcfd.svg" style="height: 12px;" type="image/svg+xml"&gt;x=1&lt;/object&gt; into its
derivatives (as listed above) at this point, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/a9abb6e999792d3ac77444b4c6e951881f1f016e.svg" style="height: 23px;" type="image/svg+xml"&gt;\[f&amp;#x27;(1)=1\quad f&amp;#x27;&amp;#x27;(1)=-1\quad f&amp;#x27;&amp;#x27;&amp;#x27;(1)=2\quad f^{(4)}(1)=-6\quad f^{(5)}(1)=24\]&lt;/object&gt;
&lt;p&gt;There's a pattern here: generally, the &lt;em&gt;n&lt;/em&gt;-th derivative at 1 is &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/7f1528bf6eeacf1268c34b1983e1911719c83be8.svg" style="height: 19px;" type="image/svg+xml"&gt;(n-1)!&lt;/object&gt;
with an alternating sign. Substituting into the Taylor series equation from
above we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/047a288b1f4b33e86bb44c8efe2efe38841900fb.svg" style="height: 36px;" type="image/svg+xml"&gt;\[p_{ln}(x)=(x-1)-\frac{1}{2}(x-1)^2+\frac{1}{3}(x-1)^3-\frac{1}{4}(x-1)^4+\cdots\]&lt;/object&gt;
&lt;p&gt;Here's a plot of approximations with the first &lt;em&gt;k&lt;/em&gt; terms (the function itself
is dark blue, as before):&lt;/p&gt;
&lt;img alt="Successive approximation of ln(x) with Taylor series around a=1" class="align-center" src="https://eli.thegreenplace.net/images/2024/taylor-ln.png" /&gt;
&lt;p&gt;While the approximation looks good in the vicinity of 1, it seems like all
approximations diverge dramatically at some point.
The next section helps understand what's going on.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="convergence-of-power-series-and-the-ratio-test"&gt;
&lt;h2&gt;Convergence of power series and the ratio test&lt;/h2&gt;
&lt;p&gt;When approximating a function with power series (e.g. with Maclaurin or Taylor
series), a natural question to ask is: does the series actually converge to the
function it's approximating, and what are the conditions on this convergence?&lt;/p&gt;
&lt;p&gt;Now it's time to treat these questions a bit more rigorously. We'll be using
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ratio_test"&gt;ratio test&lt;/a&gt; to check for
convergence. Generally, for a series:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/13c57e0553761f7737331bbccfdc94b42bb038de.svg" style="height: 49px;" type="image/svg+xml"&gt;\[\sum_{n=1}^\infty a_n\]&lt;/object&gt;
&lt;p&gt;We'll administer this test:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/490f7edeea11652357aadca50c49c20606626f9c.svg" style="height: 44px;" type="image/svg+xml"&gt;\[L = \lim_{n\to\infty}\left|\frac{a_{n+1}}{a_n}\right|\]&lt;/object&gt;
&lt;p&gt;And check the conditions for which &lt;object class="valign-m2" data="https://eli.thegreenplace.net/images/math/8ecda4d5752e9fa856c4cfc01e67e59c12960eeb.svg" style="height: 14px;" type="image/svg+xml"&gt;L &amp;lt; 1&lt;/object&gt;, meaning that our series
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Absolute_convergence"&gt;converges absolutely&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let's start with our Maclaurin series for &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/d65e37d74a88b8c2f36e5cdf395111e243986b2c.svg" style="height: 50px;" type="image/svg+xml"&gt;\[p_{cos}(x)=1-\frac{x^2}{2!}+\frac{x^4}{4!}-\frac{x^6}{6!}+\frac{x^8}{8!}-\cdots=1+\sum_{n=1}^{\infty} \frac{(-1)^n x^{2n}}{(2n)!}\]&lt;/object&gt;
&lt;p&gt;Ignoring the constant term, we'll write out the ratio limit. Note that because
of the absolute value, we can ignore the power-of-minus-one term too:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/9ac968436c92d8abae1906d06c9d561e5b91279d.svg" style="height: 144px;" type="image/svg+xml"&gt;\[\begin{align*}
L &amp;amp;= \lim_{n\to\infty}\left|\frac{a_{n+1}}{a_n}\right|\\
  &amp;amp;= \lim_{n\to\infty}\left| \frac{x^{2n+2} (2n)!}{(2n+2)! x^{2n}}\right|\\
  &amp;amp;= \lim_{n\to\infty}\left| \frac{x^2}{(2n+1)(2n+2)}\right|
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Since the limit contents are independent of &lt;em&gt;x&lt;/em&gt;, it's obvious that
that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/eb9fbe260c35041e881bc5c2d5a31041e22f8ca8.svg" style="height: 12px;" type="image/svg+xml"&gt;L=0&lt;/object&gt; for any &lt;em&gt;x&lt;/em&gt;. This means that the series converges to &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt;
at any &lt;em&gt;x&lt;/em&gt;, given an infinite number of terms. This matches our intuition for
this function, which is well-behaved (smooth everywhere).&lt;/p&gt;
&lt;p&gt;Now on to &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/86d082e11ec9c0d5b2a4df154c6b4a0755b4b512.svg" style="height: 19px;" type="image/svg+xml"&gt;ln(x)&lt;/object&gt; with its Taylor series around &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/7caf6056913504f0508c65faf2dc3f94ff65bcfd.svg" style="height: 12px;" type="image/svg+xml"&gt;x=1&lt;/object&gt;. The
series is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/fcd9a0e50cfc2114bd0cbe3d9867d1e2a8b68740.svg" style="height: 50px;" type="image/svg+xml"&gt;\[p_{ln}(x)=(x-1)-\frac{1}{2}(x-1)^2+\frac{1}{3}(x-1)^3-\frac{1}{4}(x-1)^4+\cdots=\sum_{n=1}^{\infty} \frac{(-1)^{n+1} (x-1)^n}{n}\]&lt;/object&gt;
&lt;p&gt;Once again, writing out the ratio limit:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/c527a49c5271b5b9df3883ccb0491a77ca9eb6da.svg" style="height: 192px;" type="image/svg+xml"&gt;\[\begin{align*}
L &amp;amp;= \lim_{n\to\infty}\left|\frac{a_{n+1}}{a_n}\right|\\
  &amp;amp;= \lim_{n\to\infty}\left| \frac{(x-1)^{n+1} n}{(n+1) (x-1)^n}\right|\\
  &amp;amp;= \lim_{n\to\infty}\left| \frac{n(x-1)}{(n+1)}\right|\\
 &amp;amp;= \left|x-1\right| \lim_{n\to\infty}\left| \frac{n}{(n+1)}\right|=\left| x-1\right|
\end{align*}\]&lt;/object&gt;
&lt;p&gt;To converge, we require:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/d741683ff7d9cd9515baf587944b501a778e860f.svg" style="height: 19px;" type="image/svg+xml"&gt;\[L=\left| x-1\right|&amp;lt;1\]&lt;/object&gt;
&lt;p&gt;The solution of this inequality is &lt;object class="valign-m2" data="https://eli.thegreenplace.net/images/math/0019851d0336bfbf91c4645cd3afab9eb4e3d29c.svg" style="height: 14px;" type="image/svg+xml"&gt;0 &amp;lt; x &amp;lt; 2&lt;/object&gt;. Therefore, the series
converges to &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/86d082e11ec9c0d5b2a4df154c6b4a0755b4b512.svg" style="height: 19px;" type="image/svg+xml"&gt;ln(x)&lt;/object&gt; only in this range of &lt;em&gt;x&lt;/em&gt;. This is also what we
observe in the latest plot. Another way to say it: the &lt;em&gt;radius of convergence&lt;/em&gt;
of the series around &lt;em&gt;x=1&lt;/em&gt; is 1.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;If this explanation and the plot of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt; following it don't
convince you, consider watching &lt;a class="reference external" href="https://www.youtube.com/watch?v=3d6DsjIBzJ4"&gt;this video by 3Blue1Brown&lt;/a&gt; - it
includes more visualizations as well as a compelling alternative intuition
using integrals and area.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;&lt;p class="first"&gt;Note that since &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/562597441eed562140c81684902007f6f275c940.svg" style="height: 19px;" type="image/svg+xml"&gt;cos(x)&lt;/object&gt; is cyclic, all we really need is good
approximations in the range &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/0dd5a9ce1ef753379639c54a347fd611ca7a1937.svg" style="height: 19px;" type="image/svg+xml"&gt;[-\pi, \pi)&lt;/object&gt;. Our plot only shows the
positive &lt;em&gt;x&lt;/em&gt; axis; it looks like a mirror image on the negative side, so
we see that a pretty good approximation is achieved by the time we reach
&lt;em&gt;k=5&lt;/em&gt;.&lt;/p&gt;
&lt;p class="last"&gt;This is also a good place to
note that while Maclaurin series are important in Calculus, it's not the
&lt;em&gt;best&lt;/em&gt; approximation for numerical analysis purposes; there are
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Remez_algorithm"&gt;better approximations&lt;/a&gt;
that converge faster.&lt;/p&gt;
&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Math"></category></entry><entry><title>Asking an LLM to build a simple web tool</title><link href="https://eli.thegreenplace.net/2024/asking-an-llm-to-build-a-simple-web-tool/" rel="alternate"></link><published>2024-07-09T20:09:00-07:00</published><updated>2024-07-10T03:11:34-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-07-09:/2024/asking-an-llm-to-build-a-simple-web-tool/</id><summary type="html">&lt;p&gt;I've been really enjoying following &lt;a class="reference external" href="https://simonwillison.net/"&gt;Simon Willison's blog posts&lt;/a&gt; recently. Simon shows other
programmers the way LLMs will be used for code assistance in the future, and
posts full interactions with LLMs to build small tools or parts of larger
applications.&lt;/p&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://simonwillison.net/2024/Jul/8/box-shadow-css-generator/"&gt;recent post&lt;/a&gt;
caught my attention; here Simon got â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I've been really enjoying following &lt;a class="reference external" href="https://simonwillison.net/"&gt;Simon Willison's blog posts&lt;/a&gt; recently. Simon shows other
programmers the way LLMs will be used for code assistance in the future, and
posts full interactions with LLMs to build small tools or parts of larger
applications.&lt;/p&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://simonwillison.net/2024/Jul/8/box-shadow-css-generator/"&gt;recent post&lt;/a&gt;
caught my attention; here Simon got an LLM (Claude 3.5 Sonnet in this case) to
build a complete tool that lets one configure/tweak box shadow settings
and copy the resulting CSS code for use in a real application. One thing that
seemed interesting is that the LLM in this case used some heavyweight
dependencies (React + JSX) to implement this; Almost 3 MiB of dependency for
something that clearly needs only a few dozen lines of HTML + JS to implement;
yikes.&lt;/p&gt;
&lt;p&gt;So I've decided to try my own experiment and get an LLM to do this without any
dependencies. It turned out to be very easy, because the LLM I used (in this
case ChatGPT 4o, but it could really have been any of the top-tier LLMs, I
think) opted for the no-dependency approach from the start. I was preparing to
ask it to adjust the code to remove dependencies, but this turned out to be
unnecessary.&lt;/p&gt;
&lt;p&gt;The resulting tool is very similar to Simon's in functionality; it's deployed
at &lt;a class="reference external" href="https://eliben.org/box-shadow-tool/"&gt;https://eliben.org/box-shadow-tool/&lt;/a&gt;; here's a screenshot:&lt;/p&gt;
&lt;img alt="Screenshot of box shadow tool" class="align-center" src="https://eli.thegreenplace.net/images/2024/box-shadow-screenshot.png" /&gt;
&lt;p&gt;Here are my prompts:&lt;/p&gt;
&lt;blockquote&gt;
CSS for a slight box shadow, build me a tool that helps me twiddle settings
and preview them and copy and paste out the CSS&lt;/blockquote&gt;
&lt;p&gt;ChatGPT produced a working tool but it didn't really look good on the page.&lt;/p&gt;
&lt;blockquote&gt;
Yes, make the tool itself look a bit better with some CSS so it's all centered
on the screen and there's enough space for the preview box&lt;/blockquote&gt;
&lt;p&gt;It still wasn't quite what I wanted.&lt;/p&gt;
&lt;blockquote&gt;
the container has to be wider so all the text and sliders fix nicely, and
there's still not enough space for the shadows of the preview box to show
without overlapping with other elements&lt;/blockquote&gt;
&lt;p&gt;Now it was looking better; I wanted a button to copy-paste, like in Simon's
demo:&lt;/p&gt;
&lt;blockquote&gt;
this looks better; now add a nice-looking button at the bottom that copies the
resulting css code to the clipboard&lt;/blockquote&gt;
&lt;p&gt;The code ChatGPT produced for the clipboard copy operation was flagged by
vscode as deprecated, so I asked:&lt;/p&gt;
&lt;blockquote&gt;
it seems like &amp;quot;document.execCommand('copy')&amp;quot; is deprecated; is there a more
accepted way to do this?&lt;/blockquote&gt;
&lt;p&gt;The final version can be seen in the &lt;a class="reference external" href="https://eliben.org/box-shadow-tool/"&gt;online demo&lt;/a&gt; (view-source). The complete ChatGPT
transcript is &lt;a class="reference external" href="https://chatgpt.com/share/a05935cb-3e6d-4f5d-997f-5d8541450d1c"&gt;available here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="insights"&gt;
&lt;h2&gt;Insights&lt;/h2&gt;
&lt;p&gt;Overall, this was a positive experience. While a tool like this is very simple
to implement manually, doing it with an LLM was even quicker. The results are
still not perfect in terms of alignment and space, but they're good enough. At
this point one would probably just take over and do the final tweaks manually.&lt;/p&gt;
&lt;p&gt;I was pleasantly surprised by how stable the LLM managed to keep its output
throughout the interaction; it only modified the parts I asked it to, and the
rest of the code remained identical. Stability has been an issue with LLMs
(particularly for images), and I'm happy to see it holds well for code (there
could be some special tuning or prompt engineering for ChatGPT to make this work
well).&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Machine Learning"></category><category term="Javascript"></category></entry><entry><title>Locally patching dependencies in Go</title><link href="https://eli.thegreenplace.net/2024/locally-patching-dependencies-in-go/" rel="alternate"></link><published>2024-07-04T06:35:00-07:00</published><updated>2024-07-05T13:31:42-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-07-04:/2024/locally-patching-dependencies-in-go/</id><summary type="html">&lt;p&gt;In a &lt;a class="reference external" href="https://eli.thegreenplace.net/2020/you-dont-need-virtualenv-in-go/"&gt;previous post&lt;/a&gt; I talked
about how each Go module is its own self-contained &amp;quot;virtual environment&amp;quot; during
development. Among other benefits, this makes the dependencies of a module
explicit and simple to tweak.&lt;/p&gt;
&lt;div class="section" id="locally-patching-a-dependency"&gt;
&lt;h2&gt;Locally patching a dependency&lt;/h2&gt;
&lt;p&gt;To use a concrete example, suppose our module depends on the popular â€¦&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;In a &lt;a class="reference external" href="https://eli.thegreenplace.net/2020/you-dont-need-virtualenv-in-go/"&gt;previous post&lt;/a&gt; I talked
about how each Go module is its own self-contained &amp;quot;virtual environment&amp;quot; during
development. Among other benefits, this makes the dependencies of a module
explicit and simple to tweak.&lt;/p&gt;
&lt;div class="section" id="locally-patching-a-dependency"&gt;
&lt;h2&gt;Locally patching a dependency&lt;/h2&gt;
&lt;p&gt;To use a concrete example, suppose our module depends on the popular package
&lt;a class="reference external" href="https://pkg.go.dev/github.com/google/go-cmp/cmp"&gt;go-cmp&lt;/a&gt;,
that lets us deep-compare arbitrary Go values. Say we're debugging
an intricate scenario and want to either:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Add a log statement inside the dependency to see what our code is passing
to it (e.g. &amp;quot;do I ever invoke &lt;tt class="docutils literal"&gt;cmp.Equal&lt;/tt&gt; with these specific options?&amp;quot;)&lt;/li&gt;
&lt;li&gt;Test a suspicion of a bug in the dependency by temporarily modifying its
code and seeing if this has an effect on our module.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Go module system makes this easy to accomplish; this post will demonstrate
several way of doing this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="setting-up"&gt;
&lt;h2&gt;Setting up&lt;/h2&gt;
&lt;p&gt;Let's set up a test module to demonstrate this. The full code can be found
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/gopatch-client-module"&gt;on GitHub&lt;/a&gt;, or just follow along:&lt;/p&gt;
&lt;p&gt;In a directory, run &lt;tt class="docutils literal"&gt;go mod init example.com&lt;/tt&gt; (the module name is just
a placeholder - it's a local experiment, we don't intend it to be imported
or even published online). This creates a &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file; now, let's write
this code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/google/go-cmp/cmp&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;github.com/google/go-cmp/cmp/cmpopts&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;cmpopts&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;SortSlices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;intLess&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;slices are equal&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;intLess&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then run &lt;tt class="docutils literal"&gt;go mod tidy&lt;/tt&gt;; this should get the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;github.com/google/go-cmp&lt;/span&gt;&lt;/tt&gt;
dependency, and the &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file will look something like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;module&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;example&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.22.2&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;go&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nx"&gt;cmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;v0&lt;/span&gt;&lt;span class="mf"&gt;.6.0&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(your Go version and the dependency version will likely be different, of course)&lt;/p&gt;
&lt;p&gt;Now, we'll download the dependency locally and patch it. Clone the
&lt;a class="reference external" href="https://github.com/google/go-cmp/"&gt;https://github.com/google/go-cmp/&lt;/a&gt; repository into a local directory; we'll call
it &lt;tt class="docutils literal"&gt;$DEP&lt;/tt&gt; (on my machine &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;DEP=/home/eliben/test/go-cmp&lt;/span&gt;&lt;/tt&gt;).
Next, edit &lt;tt class="docutils literal"&gt;$DEP/cmp/compare.go&lt;/tt&gt; to add a log statement:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kd"&gt;interface&lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;Option&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="hll"&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;options:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;newState&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;opts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;compareAny&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;rootStep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Equal&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we run our test module now we don't see any effect yet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go run .
slices are equal
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is to be expected! Go has no idea we've cloned the dependency locally and
want it to be used in the build process of our test module. This is the next
step.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-a-module-replace-directive"&gt;
&lt;h2&gt;Using a module &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; directive&lt;/h2&gt;
&lt;p&gt;The most basic way to accomplish what we need is using a &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; directive
in the &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file of our test module.&lt;/p&gt;
&lt;p&gt;In our module directory, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go mod edit -replace github.com/google/go-cmp=$DEP
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you look in your &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file, you'll see a new &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; directive
added there, redirecting uses of &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;github.com/google/go-cmp&lt;/span&gt;&lt;/tt&gt; to whatever
directory &lt;tt class="docutils literal"&gt;DEP&lt;/tt&gt; stands for on your machine.&lt;/p&gt;
&lt;p&gt;If we now run the test module, it will pick up the patched dependency:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go run .
2024/06/29 06:57:17 options: [FilterValues(cmpopts.sliceSorter.filter, Transformer(cmpopts.SortSlices, cmpopts.sliceSorter.sort))]
slices are equal
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="using-go-workspaces"&gt;
&lt;h2&gt;Using Go workspaces&lt;/h2&gt;
&lt;p&gt;Go workspaces (&lt;tt class="docutils literal"&gt;go.work&lt;/tt&gt; files) have been with us since version 1.18;
a workspace makes it easier to work with multi-module repositories and large
monorepos. It can also be leveraged to implement our use case very
easily.&lt;/p&gt;
&lt;p&gt;Get back to a clean &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file without a &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; directive (you can
either undo the change using source control, run &lt;tt class="docutils literal"&gt;go mod edit &lt;span class="pre"&gt;-dropreplace&lt;/span&gt; ...&lt;/tt&gt;
or just remove the &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; directive from the &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file).&lt;/p&gt;
&lt;p&gt;Now, run these commands in the test module's directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go work init
$ go work use . $DEP
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This asks the Go tool to:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Initialize an empty workspace in the current directory; a &lt;tt class="docutils literal"&gt;go.work&lt;/tt&gt; file
will be created.&lt;/li&gt;
&lt;li&gt;Add &lt;tt class="docutils literal"&gt;use&lt;/tt&gt; directives to &lt;tt class="docutils literal"&gt;go.work&lt;/tt&gt; for including the current directory
&lt;tt class="docutils literal"&gt;.&lt;/tt&gt; and the place where we checked out a local version of the dependency
(&lt;tt class="docutils literal"&gt;$DEP&lt;/tt&gt;).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you look around, a new file was created - &lt;tt class="docutils literal"&gt;go.work&lt;/tt&gt;; &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; itself was
not modified. If we run the module with &lt;tt class="docutils literal"&gt;go run .&lt;/tt&gt;, we'll see that the
local patch was picked up!&lt;/p&gt;
&lt;p&gt;I like this approach a bit more than planting &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; directives in the
&lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file, since it provides a cleaner separation between temporary
patching and the module's actual source code. While &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; files are checked
into source control and provide a critical source of truth for building the
module, &lt;tt class="docutils literal"&gt;go.work&lt;/tt&gt; files aren't typically checked in and are used to set up
a convenient local development environment. Using &lt;tt class="docutils literal"&gt;go.work&lt;/tt&gt; for temporary
patching is thus safer - it's more difficult to leave behind a &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt;
directive in the &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file and commit it (this can cause all kinds of
inconveniences when testing, for example).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="using-gohack"&gt;
&lt;h2&gt;Using &lt;tt class="docutils literal"&gt;gohack&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/rogpeppe/gohack"&gt;gohack&lt;/a&gt; is a tool designed especially
to address our use case; it predates Go workspaces. Start by installing it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ go install github.com/rogpeppe/gohack@latest
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gohack get github.com/google/go-cmp
github.com/google/go-cmp =&amp;gt; $HOME/gohack/github.com/google/go-cmp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This invocation does two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Fetch the dependency's code and store it somewhere locally. You can control
where these are stored by setting the &lt;tt class="docutils literal"&gt;$GOHACK&lt;/tt&gt; env var; the default is
&lt;tt class="docutils literal"&gt;$HOME/gohack&lt;/tt&gt;.&lt;/li&gt;
&lt;li&gt;Add a &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; line to our &lt;tt class="docutils literal"&gt;go.mod&lt;/tt&gt; file to point there.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since &lt;tt class="docutils literal"&gt;gohack&lt;/tt&gt; placed the dependency in a new location, we'll have to edit
its &lt;tt class="docutils literal"&gt;cmp/compare.go&lt;/tt&gt; file again to add the log statement. If we
&lt;tt class="docutils literal"&gt;go run .&lt;/tt&gt; in our test module, we'll see the change picked up.&lt;/p&gt;
&lt;p&gt;It's also fairly easy to undo changes with the &lt;tt class="docutils literal"&gt;gohack undo&lt;/tt&gt; command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="which-approach-to-use"&gt;
&lt;h2&gt;Which approach to use?&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;gohack&lt;/tt&gt; can be useful in some cases where a quick check is all
you need. Since &lt;tt class="docutils literal"&gt;gohack&lt;/tt&gt; obtains the dependency on its own, it makes it a
bit faster to use than cloning manually. That said, I'd be concerned about
committing the &lt;tt class="docutils literal"&gt;replace&lt;/tt&gt; line accidentally, which is why I think the workspace
approach is safer (and also more explicit).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2024-07-05:&lt;/strong&gt; Sean Liao reminded me that &lt;tt class="docutils literal"&gt;go mod vendor&lt;/tt&gt; is yet
another way to accomplish this. This approach comes with its own tradeoffs;
read &lt;a class="reference external" href="https://go.dev/ref/mod#go-mod-vendor"&gt;the documentation&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category></entry><entry><title>Summary of reading: April - June 2024</title><link href="https://eli.thegreenplace.net/2024/summary-of-reading-april-june-2024/" rel="alternate"></link><published>2024-06-30T07:38:00-07:00</published><updated>2024-06-30T14:43:06-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-06-30:/2024/summary-of-reading-april-june-2024/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;River of the Gods: Genius, Courage, and Betrayal in the Search for the
Source of the Nile&amp;quot; by Candice Millard - while the book is readable, I found
it disappointing because it focuses much more on the personalities involved
and their numerous feuds than on the actual exploration, geography and history â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;River of the Gods: Genius, Courage, and Betrayal in the Search for the
Source of the Nile&amp;quot; by Candice Millard - while the book is readable, I found
it disappointing because it focuses much more on the personalities involved
and their numerous feuds than on the actual exploration, geography and history
of the region. The scientific parts of the book would comfortably fit into a
couple of pages - the rest is fluff.&lt;/li&gt;
&lt;li&gt;&amp;quot;We have no idea&amp;quot; by J. Cham and D. Whiteson - a whimsical and introductory
look at the state of modern physics - what we know, and more importantly -
what we don't know. The book is pretty good, but is full of potty humor and
endless childish puns which I found distracting. It also adds comics
drawings on almost every page for the entertainment factor,
without adding information. I suppose these are good to try to lure kids to
read it.&lt;/li&gt;
&lt;li&gt;&amp;quot;Quantum computing explained - for beginners&amp;quot; by Pantheon Space Academy - this
is certainly the worst book I've read in the last year or more. I honestly
don't undestand how it managed to get this many positive reviews on Amazon,
unless it's some sort of mistake - or scam. The book is a tedious, repetitive
jumble of ever-changing, shallow analogies trying to explain concepts from
quantum computing. Except that it doesn't really explain anything; it mostly
tries to teach the jargon - the kind of understanding that makes you seem
knowledgeable at cocktail parties. There's not a single equation in this book,
not a single algorithm or circuit, not a single snippet of code. I still think
it's some sort of scam. It can't even be AI generated, because any modern
LLM will give you much more useful information in your first 10 minutes of
interaction than this book contains in its entirety.&lt;/li&gt;
&lt;li&gt;&amp;quot;The Lions of Al-Rassan&amp;quot; by Guy Gavriel Kay - not my usual fare! A dip into
the world of historic fantasy. The plot is loosely based on the period of
the Spanish reconquista, but everything is changed - the names, the
religions, even the celestial bodies (two moons); some magic is also mixed
in, though in very mild amounts. Good, high-paced story in most places,
though I found the protagonists to be too idealized and some of the
dialogues long and tedious.&lt;/li&gt;
&lt;li&gt;&amp;quot;Boyd: The Fighter Pilot Who Changed the Art of War&amp;quot; by Robert Coram - the
biography of John Boyd, an air-force fighter pilot (roughly between the
Korean war and Vietnam war) that later made significant contribution to
aircraft design (particularly F-15 and F-16) and the theory of conducting
military operations. Very interesting book overall, with insights about
how large organizations work.&lt;/li&gt;
&lt;li&gt;&amp;quot;Slow Productivity&amp;quot; By Cal Newport - a reshuffle of the author's ideas
from &amp;quot;Deep work&amp;quot;, served as &amp;quot;how to work less and achieve more&amp;quot; advice. Way
too general, IMHO, and thus of limited usefulness. The book is short, at
least, but the author apparently struggled to fill it up because it contains
so many barely-relevant detours. I really find cherry-picked stories about
notable people unconvincing because of the huge selection bias inherent in
them. The author even admits this in one scenario towards the end of the
book (&amp;quot;I knew so many professors who took a sabbatical to focus on something
new but never accomplished anything&amp;quot;). Unfortunately, among Newport's books
I've read so far, this is certainly my least favorite.&lt;/li&gt;
&lt;li&gt;&amp;quot;Interplanetary Robots&amp;quot; by Rod Pyle - a good overview of the robotic space
missions sent by humanity up until the Perseverance rover (the book was
written before it launched). Good writing and a decent amount of technical
detail.&lt;/li&gt;
&lt;li&gt;&amp;quot;Quantum: Einstein, Bohr and the Great Debate about the nature of reality&amp;quot;
by Manjit Kumar - a historical account of the development of quantum
mechanics, focusing on its philosiphical meaning and the opposing views held
by Einstein and Bohr. I liked this book - it describes the history and
scientists involved in it well and doesn't shy away from some actual physics.&lt;/li&gt;
&lt;li&gt;&amp;quot;Quantum Computing for Everyone&amp;quot; by Chris Bernhardt - a short and effective
introduction to QC. This is a very good book! Starting with only some basic
familiarity with linear algebra concepts, the book develops the fundamentals
of QC methodically and at just the right pace. I wish it was longer, and also
wish the author did fewer simplifications - for example, hadn't omitted the
use of complex numbers. The author clearly has a talent for explaining
technical, math-heavy material; in fact, this is one of the things that
impressed me most about this book and is something I intend to learn from.
The book's language is very terse, logically organized and yet simple! It's
like reading the Simple English version of Wikipedia; no nonsense or useless
detours, no embellishments; few and well-placed analogies. A fantastic example
for anyone writing such material.&lt;/li&gt;
&lt;li&gt;&amp;quot;Mr. Popper's Penguins&amp;quot; by Richard and Florence Atwater - a somewhat silly
but good-natured children's book about a small-town house painter raising
a family of penguins. This is a rare case where I think I liked the movie
version more, even though the plot is very different from the book.&lt;/li&gt;
&lt;li&gt;&amp;quot;The Anxious Generation: How the Great Rewiring of Childhood Is Causing
an Epidemic of Mental Illness&amp;quot; by Jonathan Haidt - the author reports on
the sharp decline in mental health of teens and pre-teens (especially girls)
since 2010, and provides compelling evidence that a combination of smartphones
and social media is the most likely cause. The book is fairly troubling, and
certainly thought-provoking. The tangential observations on the challenges
faced by Gen Z folks are also insightful.&lt;/li&gt;
&lt;li&gt;&amp;quot;Something Deeply Hidden: Quantum Worlds and the Emergence of Spacetime&amp;quot; by
Sean Carroll - the book's main goal is to explain the many-worlds theory of
quantum mechanics. It does so reasonably well, but otherwise contains a lot
of other information that seems to be poorly organized and only loosely
related to this main goal. I'd say that the first third of the book was
insightful, and the rest so so.&lt;/li&gt;
&lt;li&gt;&amp;quot;Die With Zero&amp;quot; by Bill Perkins - it's hard to read FI/RE-related discussions
these days without running into mentions of &amp;quot;Die With Zero&amp;quot;, so I decided to
give this book a try. In a sign of just how affluent modern society has
become, the author preaches not over-saving, and instead using one's savings
earlier in life when one still has the physical and mental capacity to enjoy
the experiences money can buy. It's an interesting premise, but IMHO the book
is mainly of inspirational value - as opposed to practical value. The author
tries to develop the idea of &amp;quot;peak savings&amp;quot; but it could certainly use more
work, with more details.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Re-reads:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The Working Poor: Invisible in America&amp;quot; by David K. Shipler&lt;/li&gt;
&lt;li&gt;&amp;quot;The Magic of Reality&amp;quot; by Richard Dawkins&lt;/li&gt;
&lt;li&gt;&amp;quot;A Philosophy of Software Design&amp;quot; by John Ousterhout&lt;/li&gt;
&lt;li&gt;&amp;quot;All Quiet on the Western Front&amp;quot; by Erich Maria Remarque&lt;/li&gt;
&lt;/ul&gt;
</content><category term="misc"></category><category term="Book reviews"></category></entry><entry><title>Projections and Projection Matrices</title><link href="https://eli.thegreenplace.net/2024/projections-and-projection-matrices/" rel="alternate"></link><published>2024-06-26T05:56:00-07:00</published><updated>2024-06-26T12:58:37-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-06-26:/2024/projections-and-projection-matrices/</id><summary type="html">&lt;p&gt;We'll start with a visual and intuitive representation of what a projection is.
In the following diagram, we have vector &lt;em&gt;b&lt;/em&gt; in the usual 3-dimensional space
and two possible projections - one onto the &lt;em&gt;z&lt;/em&gt; axis, and another onto the &lt;em&gt;x,y&lt;/em&gt;
plane.&lt;/p&gt;
&lt;img alt="Projection of a 3d vector onto axis and plane" class="align-center" src="https://eli.thegreenplace.net/images/2024/projection-3d.png" /&gt;
&lt;p&gt;If we think of 3D space as spanned â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;We'll start with a visual and intuitive representation of what a projection is.
In the following diagram, we have vector &lt;em&gt;b&lt;/em&gt; in the usual 3-dimensional space
and two possible projections - one onto the &lt;em&gt;z&lt;/em&gt; axis, and another onto the &lt;em&gt;x,y&lt;/em&gt;
plane.&lt;/p&gt;
&lt;img alt="Projection of a 3d vector onto axis and plane" class="align-center" src="https://eli.thegreenplace.net/images/2024/projection-3d.png" /&gt;
&lt;p&gt;If we think of 3D space as spanned by the usual basis vectors, a projection
onto the &lt;em&gt;z&lt;/em&gt; axis is simply:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/cb40026197c880dea45a56980b2c16a20248fddc.svg" style="height: 64px;" type="image/svg+xml"&gt;\[b_z=\begin{bmatrix}
0 \\
0 \\
z
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;A couple of intuitive ways to think about what a projection means:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The projection of &lt;em&gt;b&lt;/em&gt; on the &lt;em&gt;z&lt;/em&gt; axis is a vector in the direction of the
&lt;em&gt;z&lt;/em&gt; axis that's closest to &lt;em&gt;b&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The projection of &lt;em&gt;b&lt;/em&gt; on the &lt;em&gt;z&lt;/em&gt; axis is the shadow cast by &lt;em&gt;b&lt;/em&gt; when a flashlight
is pointed at it in the direction of the &lt;em&gt;z&lt;/em&gt; axis.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We'll see a more formal definition soon. A projection onto the &lt;em&gt;x,y&lt;/em&gt; plane is
similarly easy to express.&lt;/p&gt;
&lt;div class="section" id="projection-onto-a-line"&gt;
&lt;h2&gt;Projection onto a line&lt;/h2&gt;
&lt;p&gt;Projecting onto an axis is easy - as the diagram shows, it's simply taking the
vector component in the direction of the axis. But how about projections onto
arbitrary lines?&lt;/p&gt;
&lt;img alt="Projection of a 3d vector onto another 3D vector" class="align-center" src="https://eli.thegreenplace.net/images/2024/projection-line.png" /&gt;
&lt;p&gt;In vector space, a line is just all possible scalings of some vector &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Speaking more formally now, we're interested in the projection of
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; onto &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;, where the arrow over a letter means it's a
vector. The projection (which we call &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/507636722a388cbbc6ae26997a38a622bf9108ff.svg" style="height: 21px;" type="image/svg+xml"&gt;\vec{b_a}&lt;/object&gt;) is the
closest vector to &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; in the direction of &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;. In other
words, the dotted line in the diagram is at a right angle to the line &lt;em&gt;a&lt;/em&gt;;
therefore, the error vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/6520ef4731bea7ef9760aa68288a1ba843fbde82.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{e}&lt;/object&gt; is orthogonal to &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;This orthogonality gives us the tools we need to find the projection. We'll want
to find a constant &lt;em&gt;c&lt;/em&gt; such that:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/8ecbc15ef33b2a9c390302e10702a9a2b0d93af9.svg" style="height: 20px;" type="image/svg+xml"&gt;\[\vec{b_a}=c\vec{a}\]&lt;/object&gt;
&lt;p&gt;&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/6520ef4731bea7ef9760aa68288a1ba843fbde82.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{e}&lt;/object&gt; is orthogonal to &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;, meaning that their dot
product is zero: &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/95d0c31e1d2b9ede3ff6136e7d2f93975f66f266.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{e}\cdot\vec{a}=0&lt;/object&gt;. We'll use the distributive
property of the dot product in what follows:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/6bb149c58b4741e8c2c06288a5325080c40b8a33.svg" style="height: 128px;" type="image/svg+xml"&gt;\[\begin{align*}
\vec{a}\cdot\vec{e}&amp;amp;=0 \\
\vec{a}\cdot(\vec{b}-c\vec{a})&amp;amp;=0\\
\vec{a}\cdot\vec{b}-c\vec{a}\cdot\vec{a}&amp;amp;=0\\
c&amp;amp;=\frac{\vec{a}\cdot\vec{b}}{\vec{a}\cdot\vec{a}}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Note that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/7865ca07c8b7f891f073525c24dad20d9095cef5.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}\cdot\vec{a}&lt;/object&gt; is the squared &lt;em&gt;magnitude&lt;/em&gt; of
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;; for a unit vector this would be 1. This is why it doesn't
matter if &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt; is a unit vector or not - we normalize it anyway.&lt;/p&gt;
&lt;p&gt;We have a formula for &lt;em&gt;c&lt;/em&gt; now - we can find it given &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt; and
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt;. To prepare for what comes next, however, we'll switch
notations. We'll use matrix notation, in which vectors are - by convention -
column vectors, and a dot product can be expressed by a matrix multiplication
between a row and a column vector. Therefore:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/8c4bec17d5f0605dade7d1ad5c95344cbe857db0.svg" style="height: 86px;" type="image/svg+xml"&gt;\[\begin{align*}
c&amp;amp;=\frac{a^T b}{a^T a} \Rightarrow \\
b_a&amp;amp;=\frac{a^T b}{a^T a}a
\end{align*}\]&lt;/object&gt;
&lt;/div&gt;
&lt;div class="section" id="projection-matrix"&gt;
&lt;h2&gt;Projection matrix&lt;/h2&gt;
&lt;p&gt;Since the fraction representing &lt;em&gt;c&lt;/em&gt; is a constant, we can switch the order of
the multiplication by &lt;em&gt;a&lt;/em&gt;, and then use the fact that matrix multiplication
is associative to write:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ef5a8af0ac0603aeba420410629435920eb636ab.svg" style="height: 86px;" type="image/svg+xml"&gt;\[\begin{align*}
b_a&amp;amp;=a\frac{a^T b}{a^T a}\\
b_a&amp;amp;=\frac{a a^T}{a^T a}b
\end{align*}\]&lt;/object&gt;
&lt;p&gt;In our case, since &lt;em&gt;a&lt;/em&gt; is a 3D vector, &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/0fb73bd46a79f79a74feb870a6f2773674cb4144.svg" style="height: 15px;" type="image/svg+xml"&gt;a a^T&lt;/object&gt; is a 3x3 matrix &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;, while
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/a0f226ea3b10935f08820134b2eb4340a3c639e9.svg" style="height: 15px;" type="image/svg+xml"&gt;a^Ta&lt;/object&gt; is a scalar. Thus we get our
&lt;em&gt;projection matrix&lt;/em&gt; - call it &lt;em&gt;P&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/b7e89f0b6600dac3697a45c4103066b6c6b16a0b.svg" style="height: 64px;" type="image/svg+xml"&gt;\[\begin{align*}
P&amp;amp;=\frac{a a^T}{a^T a}\\
b_a&amp;amp;=Pb
\end{align*}\]&lt;/object&gt;
&lt;p&gt;A recap: given some vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;, we can construct a projection
matrix &lt;em&gt;P&lt;/em&gt;. This projection matrix can take any vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; and
help us calculate its projection onto &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt; by means of a simple
matrix multiplication!&lt;/p&gt;
&lt;div class="section" id="example-of-line-projection"&gt;
&lt;h3&gt;Example of line projection&lt;/h3&gt;
&lt;p&gt;Consider our original example - projection on the &lt;em&gt;z&lt;/em&gt; axis. First, we'll
find a vector that spans the subspace represented by the &lt;em&gt;z&lt;/em&gt; axis: a trivial
vector is the unit vector:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e6d1b2131e20e1178d846e12f05db51d719bc20d.svg" style="height: 64px;" type="image/svg+xml"&gt;\[a_z=\begin{bmatrix}
0 \\
0 \\
1
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;What's the projection matrix corresponding to this vector?&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/dee6efc0fcfd585574f933869ceaf4af566cdffd.svg" style="height: 64px;" type="image/svg+xml"&gt;\[P = \frac{a_z a_{z}^{T}}{1} = \begin{bmatrix}
0 \\
0 \\
1
\end{bmatrix}\begin{bmatrix}0&amp;amp;0&amp;amp;1\end{bmatrix}=\begin{bmatrix}
0&amp;amp;0&amp;amp;0\\
0&amp;amp;0&amp;amp;0\\
0&amp;amp;0&amp;amp;1
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Now, given any arbitrary vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; we can find its projection onto
the &lt;em&gt;z&lt;/em&gt; axis by multiplying with &lt;em&gt;P&lt;/em&gt;. For example:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/32259bb09674a6e6f361944736de956678c1ccbb.svg" style="height: 64px;" type="image/svg+xml"&gt;\[b_a=Pb=\begin{bmatrix}
0&amp;amp;0&amp;amp;0\\
0&amp;amp;0&amp;amp;0\\
0&amp;amp;0&amp;amp;1
\end{bmatrix}\begin{bmatrix}
x\\
y\\
z
\end{bmatrix}=\begin{bmatrix}
0\\
0\\
z
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Another example - less trivial this time. Say we want to project vectors onto
the line spanned by the vector:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/45fa0fde893e5e0b211ecd84f96636732570073f.svg" style="height: 64px;" type="image/svg+xml"&gt;\[a=\begin{bmatrix}
1 \\
3 \\
7
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Let's compute the projection matrix:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/d583958c635852c142cf22a0d0b6441a9e5bf4c3.svg" style="height: 64px;" type="image/svg+xml"&gt;\[P = \frac{a a^{T}}{a^T a} = \frac{1}{59}\begin{bmatrix}
1 \\
3 \\
7
\end{bmatrix}\begin{bmatrix}1&amp;amp;3&amp;amp;7\end{bmatrix}=\frac{1}{59}\begin{bmatrix}
1&amp;amp;3&amp;amp;7\\
3&amp;amp;9&amp;amp;21\\
7&amp;amp;21&amp;amp;49
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Now we'll use it to calculate the projection of
&lt;object class="valign-m7" data="https://eli.thegreenplace.net/images/math/3b696fddd0995dece7097f93105cb8c3f6095dd2.svg" style="height: 26px;" type="image/svg+xml"&gt;b=\begin{bmatrix}2 &amp;amp; 8 &amp;amp; -4\end{bmatrix}^T&lt;/object&gt; onto this line:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f5f7dc240fa88cae8e630cc2774167ccffeb9812.svg" style="height: 64px;" type="image/svg+xml"&gt;\[b_a=Pb=\frac{1}{59}\begin{bmatrix}
1&amp;amp;3&amp;amp;7\\
3&amp;amp;9&amp;amp;21\\
7&amp;amp;21&amp;amp;49
\end{bmatrix}\begin{bmatrix}
2\\
8\\
-4
\end{bmatrix}=\frac{1}{59}\begin{bmatrix}
-2\\
-6\\
-14
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;To verify this makes sense, we can calculate the error vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/6520ef4731bea7ef9760aa68288a1ba843fbde82.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{e}&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/8921404c3b6ce16571a4695866ee4b1d7c04a1fc.svg" style="height: 64px;" type="image/svg+xml"&gt;\[\begin{align*}
e&amp;amp;=b-b_a=\begin{bmatrix}
2\\
8\\
-4
\end{bmatrix}-\frac{1}{59}\begin{bmatrix}
-2\\
-6\\
-14
\end{bmatrix}=\frac{1}{59}\begin{bmatrix}
120\\
478\\
-222
\end{bmatrix}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;And check that it's indeed orthogonal to &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f91db167e161815d41ba4a61228aed44d988e419.svg" style="height: 36px;" type="image/svg+xml"&gt;\[a\cdot e = \frac{1}{59}(1\cdot 120 + 3\cdot 478 + 7 \cdot -222)=0\]&lt;/object&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="projection-onto-a-vector-subspace"&gt;
&lt;h2&gt;Projection onto a vector subspace&lt;/h2&gt;
&lt;p&gt;A subspace of a vector space is a subset of vectors from the vector space that's
closed under vector addition and scalar multiplication. For
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/b15d4bbfe66586a67fc56425a1b94e0466f3e319.svg" style="height: 15px;" type="image/svg+xml"&gt;\mathbb{R}^3&lt;/object&gt;, some common subspaces include lines that go through the
origin and planes that go through the origin.&lt;/p&gt;
&lt;p&gt;Therefore, the &lt;em&gt;projection onto a line&lt;/em&gt; scenario we've discussed so far is just
a special case of a projection onto a subspace. We'll look at the general case
now.&lt;/p&gt;
&lt;p&gt;Suppose we have an m-dimensional vector space &lt;img alt="\mathbb{R}^m" class="valign-0" src="https://eli.thegreenplace.net/images/math/91d9290b46ace1360a8a715bd7a1fa701277697b.png" style="height: 12px;" /&gt;, and a set
of &lt;em&gt;n&lt;/em&gt; linearly independent vectors &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/51b0b13a9bd883c4eaebdf828454602a9639ae0f.svg" style="height: 17px;" type="image/svg+xml"&gt;\vec{a_1},\dots,\vec{a_n} \in \mathbb{R}^m&lt;/object&gt;.
We want to find a combination of these vectors that's closest to some target
vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; - in other words, to find the projection of &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt;
onto the subspace spanned by &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/62c1dc31d09efc4e5dab47fab2aa34095d63b435.svg" style="height: 17px;" type="image/svg+xml"&gt;\vec{a_1},\dots,\vec{a_n}&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;Arbitrary m-dimensional vectors are difficult to visualize, but the derivation
here follows exactly the path we've taken for projections onto lines in 3D.
There, we were looking for a constant &lt;em&gt;c&lt;/em&gt; such that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/8d264117c06befcad931b56c0e6b39d7160971ec.svg" style="height: 13px;" type="image/svg+xml"&gt;c\vec{a}&lt;/object&gt; was the
closest vector to &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt;. Now, we're looking for a vector
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/34b58e8a800c7893cec26ee8be79f5713d2f75c9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{c}&lt;/object&gt; which represents a linear combination of &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/62c1dc31d09efc4e5dab47fab2aa34095d63b435.svg" style="height: 17px;" type="image/svg+xml"&gt;\vec{a_1},\dots,\vec{a_n}&lt;/object&gt;
that is closest to a target &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;If we organize &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/62c1dc31d09efc4e5dab47fab2aa34095d63b435.svg" style="height: 17px;" type="image/svg+xml"&gt;\vec{a_1},\dots,\vec{a_n}&lt;/object&gt; as columns into a matrix called &lt;em&gt;A&lt;/em&gt;, we
can express this as:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/edde67ce36d6642650ec7aa2fbcce40e1fca6286.svg" style="height: 20px;" type="image/svg+xml"&gt;\[\vec{b_a}=A\vec{c}\]&lt;/object&gt;
&lt;p&gt;This is a matrix multiplication: &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/34b58e8a800c7893cec26ee8be79f5713d2f75c9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{c}&lt;/object&gt; is a list of coefficients
that describes some linear combination of the columns of &lt;em&gt;A&lt;/em&gt;. As before,
we want the error vector &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/7326fd9b29ba58374541d60332b01f85c1c23230.svg" style="height: 21px;" type="image/svg+xml"&gt;\vec{e}=\vec{b}-\vec{b_a}&lt;/object&gt; to be orthogonal to the
subspace onto which we're projecting: this means it's orthogonal to every
one of &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/62c1dc31d09efc4e5dab47fab2aa34095d63b435.svg" style="height: 17px;" type="image/svg+xml"&gt;\vec{a_1},\dots,\vec{a_n}&lt;/object&gt;.
The fact that vectors &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/537ed914f38fcd3604c0ba95c6d20d9e11e7e47c.svg" style="height: 16px;" type="image/svg+xml"&gt;\vec{a_n}&lt;/object&gt;
are orthogonal to &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/6520ef4731bea7ef9760aa68288a1ba843fbde82.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{e}&lt;/object&gt; can be expressed as &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f53ea23a2082c5c678880ead067d369bf5747e98.svg" style="height: 88px;" type="image/svg+xml"&gt;\[\begin{align*}
a_{1}^{T}e&amp;amp;=0\\
\vdots\\
a_{n}^{T}e&amp;amp;=0
\end{align*}\]&lt;/object&gt;
&lt;p&gt;This is a system of linear equations, and thus it can be represented as a matrix
multiplication by a matrix with vectors &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/94740c57487dc021c3d8f42cd019025e09b9176f.svg" style="height: 20px;" type="image/svg+xml"&gt;a_{k}^T&lt;/object&gt; in its rows; this matrix
is just &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/e5ea66117060e4e5b2e83c1174d29dfc439d817a.svg" style="height: 15px;" type="image/svg+xml"&gt;A^T&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e05f35974fa739141ca1b4acc7d93882b0195cc2.svg" style="height: 17px;" type="image/svg+xml"&gt;\[A^T e=0\]&lt;/object&gt;
&lt;p&gt;But &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/b07fe8d5a1561a36a0dd2ce8df88b750cc46fdc2.svg" style="height: 13px;" type="image/svg+xml"&gt;e=b-Ac&lt;/object&gt;, so:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/55229c55b419090aff119cfb1d680c2684324d90.svg" style="height: 46px;" type="image/svg+xml"&gt;\[\begin{align*}
A^T (b-Ac)&amp;amp;=0 \Rightarrow \\
A^Tb&amp;amp;=A^TAc
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Since the columns of &lt;em&gt;A&lt;/em&gt; are linearly independent, &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/ae3d6dabd2cab15dfde53285aaceb75a173848e1.svg" style="height: 15px;" type="image/svg+xml"&gt;A^T A&lt;/object&gt; is an
invertible matrix &lt;a class="footnote-reference" href="#footnote-4" id="footnote-reference-4"&gt;[4]&lt;/a&gt;, so we can isolate &lt;em&gt;c&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/6cb5e5ca73be03d0c2bd7d1f2d6fb9d75eefc5b0.svg" style="height: 22px;" type="image/svg+xml"&gt;\[c=(A^T A)^{-1}A^T b\]&lt;/object&gt;
&lt;p&gt;Then the projection &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/a839236c9cec6e8fda2ed32f30ae7eb6cb1a74a1.svg" style="height: 21px;" type="image/svg+xml"&gt;\vec_{b_a}&lt;/object&gt; is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/5bf80a966abd492b1f042e69562ca51751e30cd9.svg" style="height: 22px;" type="image/svg+xml"&gt;\[b_a=Ac=A(A^T A)^{-1}A^T b\]&lt;/object&gt;
&lt;p&gt;Similarly to the line example, we can also define a &lt;em&gt;projection matrix&lt;/em&gt;
as:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/cc188c53b2df3c538d277023816599128c49d17e.svg" style="height: 22px;" type="image/svg+xml"&gt;\[P=A(A^T A)^{-1}A^T\]&lt;/object&gt;
&lt;p&gt;Given a vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt;, &lt;em&gt;P&lt;/em&gt; projects it onto the subspace spanned by
the vectors &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/62c1dc31d09efc4e5dab47fab2aa34095d63b435.svg" style="height: 17px;" type="image/svg+xml"&gt;\vec{a_1},\dots,\vec{a_n}&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/c95ad835eda46f7ee7b27dc6b6489a1730e481d8.svg" style="height: 14px;" type="image/svg+xml"&gt;\[b_a=Pb\]&lt;/object&gt;
&lt;p&gt;Let's make sure the dimensions work out. Recall that &lt;em&gt;A&lt;/em&gt; consists of &lt;em&gt;n&lt;/em&gt;
columns, each with &lt;em&gt;m&lt;/em&gt; rows. So we have:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/3bfa44eebfc358b6b6dc73f7db4d270698168a07.svg" style="height: 129px;" type="image/svg+xml"&gt;\[\begin{matrix}
A &amp;amp; (m\times n) \\
A^T &amp;amp;  (n\times m)\\
A^T A &amp;amp; (n\times n)  \\
(A^T A)^{-1} &amp;amp; (n\times n) \\
A(A^T A)^{-1} &amp;amp; (m\times n) \\
A(A^T A)^{-1}A^T &amp;amp; (m\times m) \\
\end{matrix}\]&lt;/object&gt;
&lt;p&gt;Since the vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; is m-dimensional, &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/93f582c0800ee17439c9ba6b47d0cdf0ccf0c8f5.svg" style="height: 12px;" type="image/svg+xml"&gt;Pb&lt;/object&gt; is valid and the
result is another m-dimensional vector - the projection &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/03ebc36d8150942788540d021bc3c47fedf9a0c3.svg" style="height: 21px;" type="image/svg+xml"&gt;\vec{b}_a&lt;/object&gt;.&lt;/p&gt;
&lt;div class="section" id="example-of-subspace-projection"&gt;
&lt;h3&gt;Example of subspace projection&lt;/h3&gt;
&lt;p&gt;At the beginning of this post there's a diagram showing the projection of
an arbitrary vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; onto a line and onto a
plane. We'll find the projection matrix for the plane case now. The projection
is onto the &lt;em&gt;xy&lt;/em&gt; plane, which is spanned by these vectors:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/610517a466bd35bd4c63c165b3d4870784ce2b6a.svg" style="height: 64px;" type="image/svg+xml"&gt;\[a_x=\begin{bmatrix}
1 \\
0 \\
0
\end{bmatrix}
a_y=\begin{bmatrix}
0 \\
1 \\
0
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Collecting them into a single matrix &lt;em&gt;A&lt;/em&gt;, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/67a17831ae3518fac78c604c82710fe6a5590c5f.svg" style="height: 64px;" type="image/svg+xml"&gt;\[A=\begin{bmatrix}
1 &amp;amp; 0\\
0 &amp;amp; 1\\
0 &amp;amp; 0
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;To find &lt;em&gt;P&lt;/em&gt;, let's first calculate &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/ae3d6dabd2cab15dfde53285aaceb75a173848e1.svg" style="height: 15px;" type="image/svg+xml"&gt;A^T A&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ec23a776b18efb2511bc583293d7d70cf549f258.svg" style="height: 64px;" type="image/svg+xml"&gt;\[A^T A=
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 1 &amp;amp; 0
\end{bmatrix}
\begin{bmatrix}
1 &amp;amp; 0\\
0 &amp;amp; 1\\
0 &amp;amp; 0
\end{bmatrix}=
\begin{bmatrix}
1 &amp;amp; 0\\
0 &amp;amp; 1
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;This happens to be the identity matrix, so its inverse is itself. Thus, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e618c6d4ea50cf468e938b555c0ea335aa7c5006.svg" style="height: 64px;" type="image/svg+xml"&gt;\[P=A(A^T A)^{-1}A^T=AIA^T=AA^T=
\begin{bmatrix}
1 &amp;amp; 0\\
0 &amp;amp; 1\\
0 &amp;amp; 0
\end{bmatrix}
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 1 &amp;amp; 0
\end{bmatrix}=
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 1 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 0
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;We can now project an arbitrary vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; onto this plane by
multiplying it with this P:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/c273b8d9daf567854bb34be9f8cf6c2fe091dcac.svg" style="height: 64px;" type="image/svg+xml"&gt;\[b_a=Pb=
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; 1 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 0
\end{bmatrix}
\begin{bmatrix}
x \\
y \\
z
\end{bmatrix}=
\begin{bmatrix}
x \\
y \\
0
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Granted, this is a fairly trivial example - but it works in the general case. As
an exercise, pick a different pair of independent vectors and find the
projection matrix onto the plane spanned by them; then, verify that the
resulting error is orthogonal to the plane.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="properties-of-projection-matrices"&gt;
&lt;h2&gt;Properties of projection matrices&lt;/h2&gt;
&lt;p&gt;Projection matrices have some interesting properties that are educational to
review.&lt;/p&gt;
&lt;p&gt;First, projection matrices are &lt;strong&gt;symmetric&lt;/strong&gt;. To understand why, first recall
how a transpose of a matrix product is done:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ef0a9adc5755ad2121bd29acf8c1acae37069fe9.svg" style="height: 22px;" type="image/svg+xml"&gt;\[(AB)^T=B^T A^T\]&lt;/object&gt;
&lt;p&gt;As a warm-up, we can show that &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/ae3d6dabd2cab15dfde53285aaceb75a173848e1.svg" style="height: 15px;" type="image/svg+xml"&gt;A^T A&lt;/object&gt; is symmetric:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ed041fc5a1e961cb015cce0aa43bae716ff760ec.svg" style="height: 22px;" type="image/svg+xml"&gt;\[(A^T A)^T=A^T (A^T)^T=A^T A\]&lt;/object&gt;
&lt;p&gt;Now, let's transpose &lt;em&gt;P&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/9891c74fb6f968ef5fd79fc46586671ae7398a0f.svg" style="height: 109px;" type="image/svg+xml"&gt;\[\begin{align*}
P&amp;amp;=A(A^T A)^{-1}A^T \\
P^T&amp;amp;=(A(A^T A)^{-1}A^T)^T\\
&amp;amp;=((A^T A)^{-1}A^T)^T A^T\\
&amp;amp;=A(A^T A)^{-1}A^T=P
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Here we've used the fact that the inverse of a symmetric matrix is also
symmetric, and we see that indeed &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/359c9df289ef29f45b04ffcbdedb39c5e1929bf5.svg" style="height: 15px;" type="image/svg+xml"&gt;P^T=P&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;Second, projection matrices are &lt;strong&gt;idempotent&lt;/strong&gt;: &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/a1becab925d990bbb1bc40503523bc757abd4ad1.svg" style="height: 15px;" type="image/svg+xml"&gt;P^2=P&lt;/object&gt;; this isn't
hard to prove either:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ab435c0da6c2d7337c546531b022fc8ce34545b7.svg" style="height: 139px;" type="image/svg+xml"&gt;\[\begin{align*}
P^2&amp;amp;=A(A^T A)^{-1}A^T A(A^T A)^{-1}A^T\\
   &amp;amp;=A(A^T A)^{-1}(A^T A)(A^T A)^{-1}A^T\\
   &amp;amp;=A(A^T A)^{-1}[(A^T A)(A^T A)^{-1}]A^T\\
   &amp;amp;=A(A^T A)^{-1}IA^T\\
   &amp;amp;=A(A^T A)^{-1}A^T=P
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Intuitive explanation: think about what a projection does - given some
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt;, it calculates
the closest vector to it in the desired subspace. If we
try to project this projection again - what will we get? Well, still the closest
vector in that subspace - itself! In other words:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f008b6de1991c31650bfddea89ff0b8aa55cef90.svg" style="height: 19px;" type="image/svg+xml"&gt;\[b_a=Pb=P(Pb)\]&lt;/object&gt;
&lt;/div&gt;
&lt;div class="section" id="projections-onto-orthogonal-subspaces"&gt;
&lt;h2&gt;Projections onto orthogonal subspaces&lt;/h2&gt;
&lt;p&gt;There's another special case of projections that is interesting to discuss:
projecting a vector onto orthogonal subspaces. We'll work through this using an
example.&lt;/p&gt;
&lt;p&gt;Consider the vector:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/148626e74e82c6b2d9e8c6cd31f482fbabeaead8.svg" style="height: 64px;" type="image/svg+xml"&gt;\[a_1=\begin{bmatrix}
1 \\
-2 \\
3
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;We'll find the projection matrix for this vector:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/f6497d632c11809e51a21587f2a037eddc927946.svg" style="height: 64px;" type="image/svg+xml"&gt;\[P_1=\frac{a_1 a_{1}^T}{a_{1}^T a_1}=
\frac{1}{14}
\begin{bmatrix}
1 &amp;amp; -2 &amp;amp; 3\\
-2 &amp;amp; 4 &amp;amp; -6\\
3 &amp;amp; -6 &amp;amp; 9
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Now, consider the following vector, which is orthogonal to &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/b7524de3f703a23d5d20820341776bfe30276686.svg" style="height: 16px;" type="image/svg+xml"&gt;\vec{a_1}&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/b310d91fb1cb0978c5480837b024fe809885fd8c.svg" style="height: 64px;" type="image/svg+xml"&gt;\[a_2=\begin{bmatrix}
-3 \\
0 \\
1
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Its projection matrix is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/2363b2e0296d2c0f409d1a5c122622127e0f84e7.svg" style="height: 64px;" type="image/svg+xml"&gt;\[P_2=\frac{a_2 a_{2}^T}{a_{2}^T a_2}=
\frac{1}{10}
\begin{bmatrix}
9 &amp;amp; 0 &amp;amp; -3\\
0 &amp;amp; 0 &amp;amp; 0\\
-3 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;It's trivial to check that both &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/3aba26d01e9d3547d4804518e43131ca778dc418.svg" style="height: 15px;" type="image/svg+xml"&gt;P_1&lt;/object&gt; and &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/97240d9f331df7b57f3d0766ffa6fba38a888857.svg" style="height: 15px;" type="image/svg+xml"&gt;P_2&lt;/object&gt; satisfy the
properties of projective matrices; what's more interesting is that
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/f32736e70c594bb14a4d8b9acb30d27d688689a0.svg" style="height: 15px;" type="image/svg+xml"&gt;P_1 + P_2&lt;/object&gt; does as well - so it's also a proper projection matrix!&lt;/p&gt;
&lt;p&gt;To take it a step further, consider yet another vector:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/b430bb9358af10100ffe7777868b175aed0c0298.svg" style="height: 64px;" type="image/svg+xml"&gt;\[a_3=\begin{bmatrix}
-1 \\
-5 \\
-3
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;The vectors &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/412ba4caae8a1f28842a91cc0c19e7db9d1150d7.svg" style="height: 19px;" type="image/svg+xml"&gt;(\vec{a_1},\vec{a_2},\vec{a_3})&lt;/object&gt; are all
mutually orthogonal, and thus form an orthogonal basis for &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/b15d4bbfe66586a67fc56425a1b94e0466f3e319.svg" style="height: 15px;" type="image/svg+xml"&gt;\mathbb{R}^3&lt;/object&gt;.
We can calculate &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/389d569332ecfb93594c5e799a493f37c74f4759.svg" style="height: 15px;" type="image/svg+xml"&gt;P_3&lt;/object&gt; in the usual way, and get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ea023279be309ce07524a111053220e4cf43138f.svg" style="height: 64px;" type="image/svg+xml"&gt;\[P_3=\frac{a_3 a_{3}^T}{a_{3}^T a_3}=
\frac{1}{35}
\begin{bmatrix}
1 &amp;amp; 5 &amp;amp; 3\\
5 &amp;amp; 25 &amp;amp; 15\\
3 &amp;amp; 15 &amp;amp; 9
\end{bmatrix}\]&lt;/object&gt;
&lt;p&gt;Not only is &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/42161e8e714578e74e3c1d193afac51c51eb7cd2.svg" style="height: 15px;" type="image/svg+xml"&gt;P_1+P_2+P_3&lt;/object&gt; is a projection matrix, it's a very familiar
matrix in general:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e2a2624bda06b15bfa1595a26f13a0d20d46848f.svg" style="height: 14px;" type="image/svg+xml"&gt;\[P_1+P_2+P_3=I\]&lt;/object&gt;
&lt;p&gt;This is equivalent to saying that for any vector &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/3e8d17f216fa7fa3ed3f7f5e36b9412d2f9c24d2.svg" style="height: 19px;" type="image/svg+xml"&gt;\[(P_1+P_2+P_3)b=b\]&lt;/object&gt;
&lt;p&gt;Hopefully this makes intuitive sense because it's just expressing
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/71fa108edb785ca9f729fa3cd5ad18556dd682e4.svg" style="height: 18px;" type="image/svg+xml"&gt;\vec{b}&lt;/object&gt; in an alternative basis for &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/b15d4bbfe66586a67fc56425a1b94e0466f3e319.svg" style="height: 15px;" type="image/svg+xml"&gt;\mathbb{R}^3&lt;/object&gt; &lt;a class="footnote-reference" href="#footnote-5" id="footnote-reference-5"&gt;[5]&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;We're dealing
with vector spaces, where we don't really have lines - only vectors.
A line is just a visual way to think about certain subspaces of the
vector space &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/b15d4bbfe66586a67fc56425a1b94e0466f3e319.svg" style="height: 15px;" type="image/svg+xml"&gt;\mathbb{R}^3&lt;/object&gt;. Specifically, a line through the
origin (lines that don't go through the origin belong in
&lt;a class="reference external" href="https://eli.thegreenplace.net/2018/affine-transformations/"&gt;affine spaces&lt;/a&gt;)
is a way to represent &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/0dea7e472c25bda0904291774c1a1a5c72aa09d1.svg" style="height: 17px;" type="image/svg+xml"&gt;\forall c, c\vec{a}&lt;/object&gt; where &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;
is a vector in the same direction as this line and &lt;em&gt;c&lt;/em&gt; is a constant;
in other words it's the subspace of &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/b15d4bbfe66586a67fc56425a1b94e0466f3e319.svg" style="height: 15px;" type="image/svg+xml"&gt;\mathbb{R}^3&lt;/object&gt; spanned by
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/1e37c650a8e07c81d1a1b03f075bdf45139d65e9.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{a}&lt;/object&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;By the rules of matrix multiplication: we're multiplying a column vector
(a 3x1 matrix) by a row vector (a 1x3 matrix). The multiplication is
allowed because the inner dimensions match, and the result is a 3x3
matrix.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Recall from the earlier example: we're dropping the explicit vector
markings to be able to write matrix arithmetic more naturally. By
default vectors are column vectors, so &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/3ef5d107cf603c9f2987896f4a574a0967ad3059.svg" style="height: 15px;" type="image/svg+xml"&gt;v^T w&lt;/object&gt; expresses the
dot product between vectors &lt;img alt="\vec{v}" class="valign-0" src="https://eli.thegreenplace.net/images/math/39a3a59a8f524cf72620db07b9ba7cdce9fc9391.png" style="height: 13px;" /&gt; and &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/d45128696127d3ae74860c6f8b14ce6ca20d15e7.svg" style="height: 13px;" type="image/svg+xml"&gt;\vec{w}&lt;/object&gt;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;It's possible to prove this statement, but this post is already long
enough.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-5" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-5"&gt;[5]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;This is a special case of a &lt;a class="reference external" href="https://eli.thegreenplace.net/2015/change-of-basis-in-linear-algebra/"&gt;change of basis&lt;/a&gt;,
in which the basis is orthogonal.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Math"></category></entry><entry><title>Reading Google Sheets from a Go program</title><link href="https://eli.thegreenplace.net/2024/reading-google-sheets-from-a-go-program/" rel="alternate"></link><published>2024-05-31T18:07:00-07:00</published><updated>2024-06-03T13:17:56-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-05-31:/2024/reading-google-sheets-from-a-go-program/</id><summary type="html">&lt;p&gt;I recently needed to process some data from a Google Sheet in a Go program, and
was looking for the most straightforward way to do so on my local machine.
This post lists some approaches that I found to work, with full source code.&lt;/p&gt;
&lt;p&gt;To access the Sheets API, you'll â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I recently needed to process some data from a Google Sheet in a Go program, and
was looking for the most straightforward way to do so on my local machine.
This post lists some approaches that I found to work, with full source code.&lt;/p&gt;
&lt;p&gt;To access the Sheets API, you'll need a GCP project, and would typically have
the &lt;tt class="docutils literal"&gt;gcloud&lt;/tt&gt; command-line tool installed. To enable the sheets API for your
project, run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcloud services enable sheets.googleapis.com --project=&amp;lt;PROJECT-NAME&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you want to list which APIs are already enabled, you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ gcloud services list --enabled --project=&amp;lt;PROJECT-NAME&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The simplest approach I found to work was using a &lt;em&gt;service account&lt;/em&gt;. This post
demonstrates this approach, as well as a (slightly) more involved approach
that uses Oauth 2.0&lt;/p&gt;
&lt;div class="section" id="service-account"&gt;
&lt;h2&gt;Service account&lt;/h2&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://cloud.google.com/iam/docs/service-account-overview"&gt;service account on GCP&lt;/a&gt;
can be thought of as a virtual account, along with its own email address,
attached to a project. These accounts have their own auth, permissions, etc.
This is very useful for running on a VM - you typically don't want the VM to
be logged in with your primary Google account, and this service account can be
specific to a given VM (or a group thereof).&lt;/p&gt;
&lt;p&gt;Start by creating a new service account &lt;a class="reference external" href="https://console.cloud.google.com/iam-admin/serviceaccounts"&gt;on this page&lt;/a&gt;.
Once created, select &lt;em&gt;Manage Keys&lt;/em&gt; in the Actions menu, and add a new key. This
will download a private key to your machine; keep it safe! The following program
expects this key file to be provided with the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-keyfile&lt;/span&gt;&lt;/tt&gt; flag:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;context&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;flag&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;io/ioutil&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;log&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;golang.org/x/oauth2/google&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;google.golang.org/api/option&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;google.golang.org/api/sheets/v4&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kd"&gt;func&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;keyFilePath&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;keyfile&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;path to the credentials file&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Parse&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;context&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Background&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;ioutil&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ReadFile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;keyFilePath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unable to read key file:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;scopes&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://www.googleapis.com/auth/spreadsheets.readonly&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;google&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;JWTConfigFromJSON&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;credentials&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;scopes&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unable to create JWT configuration:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;sheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;NewService&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;option&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;WithHTTPClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;config&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unable to retrieve sheets service: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;// ...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can specify the requested scopes (permissions) when creating an auth config.
Here we're asking for read-only access to the Google Sheets.&lt;/p&gt;
&lt;p&gt;Once auth succeeds (&lt;tt class="docutils literal"&gt;sheets.NewService&lt;/tt&gt; returns w/o an error), we can use the
&lt;a class="reference external" href="https://pkg.go.dev/google.golang.org/api/sheets/v4"&gt;sheets package&lt;/a&gt; to
read and analyze the sheet; the code below simply prints the document's title
and emits all the values from columns A and B in &lt;tt class="docutils literal"&gt;Sheet1&lt;/tt&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;docId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1qsNWsZuw98r9HEl01vwxCO5O1sIsI-fr0bJ4KGVvWsU&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spreadsheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;docId&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unable to retrieve data from document: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The title of the doc is: %s\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;doc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Properties&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;srv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Spreadsheets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;docId&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Sheet1!A:B&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;Do&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Fatalf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;unable to retrieve range from document: %v&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;err&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Selected major dimension=%v, range=%v\n&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MajorDimension&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Range&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;range&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Values&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nx"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note the &lt;tt class="docutils literal"&gt;docId&lt;/tt&gt; passed to the &lt;tt class="docutils literal"&gt;sheets&lt;/tt&gt; package; this is the path
segment in your spreadsheet's URL following the &lt;tt class="docutils literal"&gt;/d/&lt;/tt&gt;. In this example, I'm
using a &lt;a class="reference external" href="https://docs.google.com/spreadsheets/d/1qsNWsZuw98r9HEl01vwxCO5O1sIsI-fr0bJ4KGVvWsU/"&gt;test sheet I've created&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Important: unless your sheet is world-readable, your service account won't be
able to access it. Here the account's email comes in handy; you can
take it from the service account's GCP IAM page (&lt;em&gt;Details&lt;/em&gt; tab), and give this
email permissions to the sheet. This way you can have the program processing
a private sheet that only you have access to.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="oauth"&gt;
&lt;h2&gt;OAuth&lt;/h2&gt;
&lt;p&gt;Another way to achieve what we want is with OAuth. This also requires a bit
of setup in your project's GCP console. Follow the &lt;a class="reference external" href="https://developers.google.com/docs/api/quickstart/go"&gt;Go quickstart docs&lt;/a&gt;
for that. Our sample assumes you've saved the &lt;tt class="docutils literal"&gt;credentials.json&lt;/tt&gt;
file somewhere locally and will pass it through the &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-credfile&lt;/span&gt;&lt;/tt&gt; flag.
Unlike the quickstart, it handles all the token exchange process automatically
without having to ask you to copy a code from a web page. You still have to
authenticate the first time you run it, of course.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-docs-sheets-auth"&gt;The full code of the sample is available on GitHub&lt;/a&gt;;
while the auth part is different, the actual sheets processing code is identical
to the service account sample.&lt;/p&gt;
&lt;p&gt;For an overview of the OAuth protocol, see &lt;a class="reference external" href="https://eli.thegreenplace.net/2023/sign-in-with-github-in-go/"&gt;my earlier post&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="p-s-adc"&gt;
&lt;h2&gt;P.S. ADC&lt;/h2&gt;
&lt;p&gt;Initially, I had trouble accessing the sheet using ADC (Application Default
Credentials), but following a &lt;a class="reference external" href="https://news.ycombinator.com/item?id=40556174"&gt;HN comment on this post&lt;/a&gt;,
I was motivated to try again and it worked. I may have mixed up my auth JSON
files previously, because the code is identical to what I've originally tried.
In any case, &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/go-docs-sheets-auth"&gt;the code is available on GitHub&lt;/a&gt;
along with the other options. Depending on the exact use case, ADC may be
simpler than using a service account (though IMHO the service account is a more
&amp;quot;reliable&amp;quot; method across machines because its configuration is more explicit -
less is happening under the hood).&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Internet"></category><category term="Network Programming"></category></entry><entry><title>Tokens for LLMs: Byte Pair Encoding in Go</title><link href="https://eli.thegreenplace.net/2024/tokens-for-llms-byte-pair-encoding-in-go/" rel="alternate"></link><published>2024-04-25T06:34:00-07:00</published><updated>2024-05-04T19:46:23-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-04-25:/2024/tokens-for-llms-byte-pair-encoding-in-go/</id><summary type="html">&lt;p&gt;A basic unit of currency in modern LLMs is the &lt;em&gt;token&lt;/em&gt;; &lt;a class="reference external" href="https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/"&gt;exciting new models&lt;/a&gt;
have long context windows of millions of &lt;em&gt;tokens&lt;/em&gt;. API pricing for the large
providers is &lt;em&gt;per-token&lt;/em&gt;. We're even seeing the invention of new, derived units
like TPM (&lt;a class="reference external" href="https://ai.google.dev/pricing"&gt;tokens per minute&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But what are tokens?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them"&gt;This OpenAI â€¦&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A basic unit of currency in modern LLMs is the &lt;em&gt;token&lt;/em&gt;; &lt;a class="reference external" href="https://blog.google/technology/ai/google-gemini-next-generation-model-february-2024/"&gt;exciting new models&lt;/a&gt;
have long context windows of millions of &lt;em&gt;tokens&lt;/em&gt;. API pricing for the large
providers is &lt;em&gt;per-token&lt;/em&gt;. We're even seeing the invention of new, derived units
like TPM (&lt;a class="reference external" href="https://ai.google.dev/pricing"&gt;tokens per minute&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;But what are tokens?&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://help.openai.com/en/articles/4936856-what-are-tokens-and-how-to-count-them"&gt;This OpenAI help article&lt;/a&gt;
tells us that tokens are &lt;em&gt;pieces of words&lt;/em&gt;, and gives some useful rules of thumb
like a token being equivalent to approximately 4 characters or 3/4 of a word
for the English language.&lt;/p&gt;
&lt;p&gt;In this post I want to review the most commonly used algorithm for splitting
text into tokens, provide a complete implementation in Go, and show a playground
for experimenting with it. While my implementation isn't tuned for speed, it
aims to be complete, readable and compatible with OpenAI's &lt;a class="reference external" href="https://github.com/openai/tiktoken"&gt;tiktoken library&lt;/a&gt;, generating identical results and
working with the same vocabulary files.&lt;/p&gt;
&lt;div class="section" id="byte-pair-encoding-introduction"&gt;
&lt;h2&gt;Byte pair encoding - introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Byte_pair_encoding"&gt;Byte pair encoding&lt;/a&gt; (BPE) is
an algorithm originally designed for data compression. A &lt;a class="reference external" href="https://arxiv.org/abs/1508.07909"&gt;2016 paper&lt;/a&gt; suggested re-purposing it for &amp;quot;word
segmentation&amp;quot; for machine learning tasks. The colloquial term for word
segmentation is &lt;em&gt;tokenization&lt;/em&gt;.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Input: arbitrary text with words, numbers, whitespace and punctuation.&lt;/li&gt;
&lt;li&gt;Output: list of tokens representing the same text. Each token is an integer
identifier which can be looked up in a vocabulary to reproduce the input text
&lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The BPE algorithm has an important pre-processing step: splitting the input text
into words. The splitting is customizable and different models / vocabularies
use different regexps for splitting (more on this later). The main idea is
some sort of whitespace-based splitting (though whitespace itself is preserved)
because we typically don't want inter-word tokens &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We'll be using this line from a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Blue_(Da_Ba_Dee)"&gt;catchy 1990s song&lt;/a&gt;
as an example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i&amp;#39;m blue dabadee dabadam
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A word splitter will produce something like the following list, where spaces are
replaced by underscores &lt;tt class="docutils literal"&gt;_&lt;/tt&gt; for the sake of presentation (they remain as
spaces in the actual implementation of the algorithm and its trained
vocabulary):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i
&amp;#39;m
_blue
_dabadee
_dabadam
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A few things to note:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The contraction &lt;tt class="docutils literal"&gt;'m&lt;/tt&gt; is split from &lt;tt class="docutils literal"&gt;i&lt;/tt&gt; - this is common for English language
splitters, which want things like &lt;tt class="docutils literal"&gt;'m&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;'ll&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;'re&lt;/tt&gt; as separate words.&lt;/li&gt;
&lt;li&gt;Whitespace is preserved and attached at the start of a word. Whitespace is
important because tokens at the beginning of words sometimes have different
semantic meaning from tokens not at the beginning of words.
The choice of where it's attached is arbitrary. From this point on, whitespace
bytes are considered like any other bytes in the BPE algorithm.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now is a good time for some terminology we'll be using while talking about BPE:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;em&gt;Word&lt;/em&gt;: produced by the splitter in pre-processing, like the list shown above.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Token&lt;/em&gt;: typically a sub-word sequence of bytes; the output of the tokenizer
is a list of tokens, by ID.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Token ID&lt;/em&gt;: unique numerical identifier for a token.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Vocabulary&lt;/em&gt;: a mapping of token IDs --&amp;gt; token values learned by the tokenizer
during the training process.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Training&lt;/em&gt;: the process in which BPE learns a vocabulary from a corpus of
text.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Splitter regexp&lt;/em&gt;: regular expression used to split text into words during
pre-processing. Given an algorithm (in this case BPE), the pair vocabulary +
splitter regexp unambiguously defines how a given text will be tokenized.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Encoder&lt;/em&gt;: given a vocabulary and a splitter regexp, tokenizes any text into
a list of IDs from the vocabulary.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Decoder&lt;/em&gt;: given a list of IDs and the vocabulary, reconstructs the
original text.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="training"&gt;
&lt;h2&gt;Training&lt;/h2&gt;
&lt;p&gt;BPE training proceeds by first assuming each byte is its own token, and then
successively merging pairs of tokens into longer tokens and adding these to
the vocabulary, until the desired vocabulary size is achieved.&lt;/p&gt;
&lt;p&gt;Let's reuse our example, starting with these words:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;i
&amp;#39;m
_blue
_dabadee
_dabadam
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The BPE process starts by creating a token for each byte in the inclusive
range [0..255]. So the minimal vocabulary size is 256; this guarantees that
from the very start, there's a valid encoded representation of any text.&lt;/p&gt;
&lt;p&gt;Then, the following process is repeated:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Count how many times each ordered pair of bytes appears in the input.
&lt;em&gt;Ordered pair&lt;/em&gt; here means two bytes right next to each other. In our example,
some such pairs are &amp;quot;bl&amp;quot;, &amp;quot;da&amp;quot;, &amp;quot;de&amp;quot;, &amp;quot;ee&amp;quot; etc.&lt;/li&gt;
&lt;li&gt;Find the pair with the highest count, and create a new token from it (create
a new token ID, mapping it to the concatenation of the most common pair).&lt;/li&gt;
&lt;li&gt;Replace this most common pair with the combined token in the input set.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In our example, we start by splitting input words to bytes, so it's a list of
single-byte token lists. This is our working list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[i]
[&amp;#39; m]
[_ b l u e]
[_ d a b a d e e]
[_ d a b a d a m]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we count the frequency of appearance of each ordered pair:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[d a] --&amp;gt; 3
[a b] --&amp;gt; 2
[b a] --&amp;gt; 2
[&amp;#39; m] --&amp;gt; 1
[_ b] --&amp;gt; 1
[l u] --&amp;gt; 1
[u e] --&amp;gt; 1
[_ d] --&amp;gt; 2
[a d] --&amp;gt; 2
[d e] --&amp;gt; 1
[e e] --&amp;gt; 1
[b l] --&amp;gt; 1
[a m] --&amp;gt; 1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The pair &amp;quot;da&amp;quot; is the most common one, so we're creating a new token for it,
and substituting it everywhere in the working list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[i]
[&amp;#39; m]
[_ b l u e]
[_ da b a d e e]
[_ da b a da m]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, in every instance &amp;quot;d&amp;quot; followed by &amp;quot;a&amp;quot; was combined into &amp;quot;da&amp;quot;.
Now repeat the process; finding the most common pairs in this new working list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[e e] --&amp;gt; 1
[a da] --&amp;gt; 1
[l u] --&amp;gt; 1
[_ da] --&amp;gt; 2
[da b] --&amp;gt; 2
[a d] --&amp;gt; 1
[d e] --&amp;gt; 1
[da m] --&amp;gt; 1
[&amp;#39; m] --&amp;gt; 1
[_ b] --&amp;gt; 1
[b l] --&amp;gt; 1
[u e] --&amp;gt; 1
[b a] --&amp;gt; 2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Several pairs have a count of 2, so we pick one arbitrarily. Let's say it's
&lt;tt class="docutils literal"&gt;_da&lt;/tt&gt; (a space followed by &amp;quot;da&amp;quot;). We add &lt;tt class="docutils literal"&gt;_da&lt;/tt&gt; as a new token and
make replacements in the working list:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[i]
[&amp;#39; m]
[_ b l u e]
[_da b a d e e]
[_da b a da m]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And so on. When does this process stop? When we either run out of pairs (every
word consists of a single token) or - more realistically for an actual training
corpus - when we reach our desired vocabulary size. For example the vocabulary
used for GPT-4 has around 100,000 tokens (more on this later).&lt;/p&gt;
&lt;p&gt;The output of the training process is a vocabulary; let's say we've only run
two cycles on our input text as described. The vocabulary will have 258 tokens
in it: 256 for the single bytes, one for &lt;tt class="docutils literal"&gt;da&lt;/tt&gt; and another for &lt;tt class="docutils literal"&gt;_da&lt;/tt&gt;. Each
of these would have a unique integer ID.&lt;/p&gt;
&lt;p&gt;In our Go sample code, the training is implemented &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/blob/main/2024/bpe/train.go"&gt;in this file&lt;/a&gt;. You
can set the &lt;tt class="docutils literal"&gt;debugTrain&lt;/tt&gt; variable to &lt;tt class="docutils literal"&gt;true&lt;/tt&gt; to follow the process on some
sample text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="encoding"&gt;
&lt;h2&gt;Encoding&lt;/h2&gt;
&lt;p&gt;Having learned a vocabulary, the process of encoding is what happens every time
we feed text into an LLM and it needs to be tokenized. The input is arbitrary
text, a splitting regexp and a vocabulary. For example, let's take the input
text &amp;quot;yada daba&amp;quot;. Splitting is performed as before, and the input is broken
into individual bytes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[y a d a]
[_ d a b a]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BPE encoding takes the vocabulary and tries to apply learned tokens to the input
text, word by word. The process is &lt;em&gt;greedy&lt;/em&gt; - tokens are applied in the same
order they've been learned (this is easy to accomplish by assigning
monotonically increasing integer IDs to new tokens in the vocabulary, and then
prioritizing lower-numbered tokens for encoding).&lt;/p&gt;
&lt;p&gt;The first token we learned was &lt;tt class="docutils literal"&gt;da&lt;/tt&gt;, so let's apply that:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[y a da]
[_ da b a]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next token we learned was &lt;tt class="docutils literal"&gt;_da&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[y a da]
[_da b a]
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the final stage; there are no more learned tokens to apply. The result
will consist of 6 tokens.&lt;/p&gt;
&lt;p&gt;In our sample code, the encoder is &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/blob/main/2024/bpe/encode.go"&gt;in this file&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="realistic-vocabulary-and-splitting"&gt;
&lt;h2&gt;Realistic vocabulary and splitting&lt;/h2&gt;
&lt;p&gt;The examples shown so far have been toys, but the algorithms are real and work
with the actual vocabularies and splitters used in modern models. As a case
study, the tokenizer used for OpenAI's GPT-4 uses a vocabulary called
&lt;tt class="docutils literal"&gt;cl100k_base&lt;/tt&gt;, which contains 100k tokens in addition to the 256 byte-sized
ones. This is also the vocabulary (encoding) the
&lt;a class="reference external" href="https://github.com/openai/tiktoken"&gt;tiktoken&lt;/a&gt; library uses. It can be
freely downloaded from OpenAI - a copy is available in my
&lt;a class="reference external" href="https://github.com/eliben/code-for-blog/tree/main/2024/bpe/data"&gt;sample repository&lt;/a&gt;.
The file is base64 encoded, which is easy to unravel and we'll see
tokens like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;quot; Fritz&amp;quot;  91083
&amp;quot;Initially&amp;quot;  91084
&amp;quot;nodeValue&amp;quot;  91085
&amp;quot;_TRIANGLES&amp;quot;  91086
&amp;quot;-backend&amp;quot;  91087
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The token string value is to the left, and the numerical token ID is to the
right. As you can see, the algorithm is not particularly discerning about what
it learns - names, pieces of code - whatever works!&lt;/p&gt;
&lt;p&gt;The other important data needed to reproduce OpenAI's tokenization is the
splitting regexp, which is this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(?i:&amp;#39;s|&amp;#39;t|&amp;#39;re|&amp;#39;ve|&amp;#39;m|&amp;#39;ll|&amp;#39;d)|[^\r\n\p{L}\p{N}]?\p{L}+|\p{N}{1,3}| ?[^\s\p{L}\p{N}]+[\r\n]*|\s*[\r\n]+|\s+(?!\S)|\s+
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It's just a combination of several alternatives. You could
use one of the many &amp;quot;regexp explainer&amp;quot; websites out there to study
it, or ask a modern LLM, but the gist of it is: this regexp splits
space-delimited words, leaving spaces in front of the words, with some special
provisions like English contractions (being separate words) and long numbers
being split to groups of 3. For Go programmers, it's important to note that
this pattern uses &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;?!&lt;/span&gt;&lt;/tt&gt; - negative lookahead - which the standard &lt;tt class="docutils literal"&gt;regexp&lt;/tt&gt;
package doesn't support. Therefore, we'll have to reach for the 3rd party
&lt;a class="reference external" href="https://github.com/dlclark/regexp2"&gt;regexp2&lt;/a&gt; to implement this &lt;a class="footnote-reference" href="#footnote-3" id="footnote-reference-3"&gt;[3]&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our sample repository, take a look at &lt;a class="reference external" href="https://github.com/eliben/code-for-blog/blob/main/2024/bpe/tiktoken_tokenize_test.go"&gt;this test&lt;/a&gt;
that ties everything together - it loads the &lt;tt class="docutils literal"&gt;cl100k_base&lt;/tt&gt; encoding and uses
it alongside the splitting regexp to tokenize some real text.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="full-online-demo-with-a-web-ui-and-webassembly"&gt;
&lt;h2&gt;Full online demo with a web UI and WebAssembly&lt;/h2&gt;
&lt;p&gt;My goal with this project wasn't only to understand the BPE algorithm, but to
also try reproducing the actual tokenizer used by OpenAI for its most modern
models. And this goal was accomplished!&lt;/p&gt;
&lt;p&gt;OpenAI has a nice &lt;a class="reference external" href="https://platform.openai.com/tokenizer"&gt;website here&lt;/a&gt;
that lets you enter text and see how it's tokenized. I've managed to reproduce
this UI - see the &lt;tt class="docutils literal"&gt;cmd/wasm&lt;/tt&gt; directory in the repository. I've also placed it
online - it can ran in your browser &lt;a class="reference external" href="https://eliben.org/bpe/"&gt;from here&lt;/a&gt;.
Here's a screenshot &lt;a class="footnote-reference" href="#footnote-4" id="footnote-reference-4"&gt;[4]&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="Screenshot of tokenizer with a sample text, showing tokens" class="align-center" src="https://eli.thegreenplace.net/images/2024/tokenizer-screenshot.png" /&gt;
&lt;p&gt;How it works: the Go implementation of BPE is compiled to a WebAssembly binary
that's loaded from a bit of glue JavaScript embedded in a simple HTML page.
The JavaScript watches the text box as you type and sends the string to a Go
function exported from the WASM, which tokenizes it on the fly. So we get a nice
effect of &amp;quot;tokens updated as we type&amp;quot;. The selection button at the bottom also
lets us see the numerical IDs for these tokens - they should be equivalent to
what tiktoken is producing.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;For simplicity, this post will focus on English. As you'll see, however,
the BPE algorithm is language-agnostic.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;There's also a performance implication: if we make tokenization
word-oriented, we can easily implement streaming tokenization without
depending on previous words.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-3" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-3"&gt;[3]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;I think it would be possible - with a bit of effort - to work around this
limitation and stick to the standard library, but just using &lt;tt class="docutils literal"&gt;regexp2&lt;/tt&gt;
is simpler, and it's also what &lt;a class="reference external" href="https://github.com/pkoukk/tiktoken-go"&gt;tiktoken-go&lt;/a&gt;
is doing.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-4" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-4"&gt;[4]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;You'll notice that in this example every word (except contractions) is
a separate token; this shouldn't be surprising, since these are all very
common words and the vocabulary is large! Try playing with it a bit
though, giving it longer words (like &amp;quot;discombobulated&amp;quot;) or non-trivial
variable names from a programming language.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Go"></category><category term="Machine Learning"></category><category term="WebAssembly"></category></entry><entry><title>Method of differences and Newton polynomials</title><link href="https://eli.thegreenplace.net/2024/method-of-differences-and-newton-polynomials/" rel="alternate"></link><published>2024-04-16T05:54:00-07:00</published><updated>2024-06-26T12:58:37-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-04-16:/2024/method-of-differences-and-newton-polynomials/</id><summary type="html">&lt;p&gt;I was reading about Babbage's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Difference_engine"&gt;Difference engine&lt;/a&gt; the other
day, and stumbled upon a very interesting application of the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Divided_differences"&gt;forward differences&lt;/a&gt;
method.
It turns out that if we get a sequence generated by a polynomial, under certain
conditions we can find the generating polynomial from just a few elements in â€¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was reading about Babbage's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Difference_engine"&gt;Difference engine&lt;/a&gt; the other
day, and stumbled upon a very interesting application of the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Divided_differences"&gt;forward differences&lt;/a&gt;
method.
It turns out that if we get a sequence generated by a polynomial, under certain
conditions we can find the generating polynomial from just a few elements in
the sequence.&lt;/p&gt;
&lt;p&gt;For example, 0, 1, 5, 12, 22, 35, 51... is a sequence known as
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pentagonal_number"&gt;the pentagonal numbers&lt;/a&gt;,
and we can use this technique to figure out that the polynomial
&lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/5b260a9d5bbd5288c720d246b76f459a34dc43b2.svg" style="height: 25px;" type="image/svg+xml"&gt;\frac{3n^2}{2}-\frac{n}{2}&lt;/object&gt; generates it &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt;.&lt;/p&gt;
&lt;div class="section" id="notation"&gt;
&lt;h2&gt;Notation&lt;/h2&gt;
&lt;p&gt;Let's start with some mathematical notation. We'll call the underlying function
generating the sequence &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt;. In our example, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e5a1616b377fb66cb2a07343c5d3cd1eb232f69f.svg" style="height: 19px;" type="image/svg+xml"&gt;f(0)=0&lt;/object&gt;,
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a259694d0b5a8eb2ab2bdaf5233a65b6564b6971.svg" style="height: 19px;" type="image/svg+xml"&gt;f(1)=1&lt;/object&gt;, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/462967692d2cae32bb7c97fff3eba434f18fa36b.svg" style="height: 19px;" type="image/svg+xml"&gt;f(2)=5&lt;/object&gt;, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/28e07a49a51fb9429d839ceba23f0f210b7e227f.svg" style="height: 19px;" type="image/svg+xml"&gt;f(3)=12&lt;/object&gt; and so on.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The &lt;em&gt;first difference&lt;/em&gt; is the sequence &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/90c44106d8d77c32cb18afdcb981a76f7560e2e0.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(0)=f(1)-f(0)&lt;/object&gt;,
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/304708f95d4d8aa49001cce85a05201cf46b7613.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(1)=f(2)-f(1)&lt;/object&gt;, etc.&lt;/li&gt;
&lt;li&gt;The &lt;em&gt;second difference&lt;/em&gt; is the sequence &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/165a28def741d96ae27b295d3afe0845566e4c41.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^2 f(0)=\Delta f(1) - \Delta f(0)&lt;/object&gt;,
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e54a7d96a0cdf8a5507cf4242033555f5e9f4129.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^2 f(1)=\Delta f(2) - \Delta f(1)&lt;/object&gt; etc.&lt;/li&gt;
&lt;li&gt;In general, the k-th difference is: &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/1c79f2519166202a7529b72c5aecb083b285a8df.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta ^k f(n)=\Delta ^{k-1}f(n+1) - \Delta ^{k-1}f(n)&lt;/object&gt;.&lt;/li&gt;
&lt;li&gt;As a starting condition in the induction of differences, we can say that
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt; itself is the 0-th difference.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="difference-table"&gt;
&lt;h2&gt;Difference table&lt;/h2&gt;
&lt;p&gt;We can construct the &lt;em&gt;difference table&lt;/em&gt; for our sequence and observe its
properties. In a difference table, the first column is &lt;em&gt;n&lt;/em&gt;, which runs from 0
to whatever number of elements we have for the sequence. The second column is
the values of the sequence at these &lt;em&gt;n&lt;/em&gt;. Then come the first difference, the
second difference and so on. For our sample sequence we get the table:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/ddf012f5699fff847f59b58ff97285c32fa72e99.svg" style="height: 148px;" type="image/svg+xml"&gt;\[\begin{matrix}
n &amp;amp; f(n) &amp;amp; \Delta f(n) &amp;amp; \Delta ^2 f(n)  &amp;amp;  \Delta ^3 f(n) \\
0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 3 &amp;amp; 0 \\
1 &amp;amp; 1 &amp;amp; 4 &amp;amp; 3 &amp;amp; 0 \\
2 &amp;amp; 5 &amp;amp; 7 &amp;amp; 3 &amp;amp; 0 \\
3 &amp;amp; 12 &amp;amp; 10 &amp;amp; 3 &amp;amp; \\
4 &amp;amp; 22 &amp;amp; 13 &amp;amp;  &amp;amp;  \\
5 &amp;amp; 35 &amp;amp; &amp;amp; &amp;amp;
\end{matrix}\]&lt;/object&gt;
&lt;p&gt;Notice how at some point the differences become all-zero! We'll soon see why.&lt;/p&gt;
&lt;p&gt;Obviously, we can construct such a table from only the column of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt; -
that's what we just did! A more interesting observation is that if we accept
that all differences (columns) are 0 from a certain point, we can also construct
this table from just the first row! For example, with &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/233b23c15ba8894ccefa4845ae4b1954cc2c0ad7.svg" style="height: 19px;" type="image/svg+xml"&gt;f(0)&lt;/object&gt; and
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/607ab76bc5cd741a68f8fa4a934735835cda03c8.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(0)&lt;/object&gt; in hand, we know &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/3c70ae40a98b1cf4bb34daa3ba2573e31e4bfd34.svg" style="height: 19px;" type="image/svg+xml"&gt;f(1)&lt;/object&gt;; with &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/607ab76bc5cd741a68f8fa4a934735835cda03c8.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(0)&lt;/object&gt; and
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/673fc969775d75c8845c11bf81e042c20012dedf.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^2 f(0)&lt;/object&gt;, we know &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/90bb6aa06dd392c5af19397ce81dc975b17b5bba.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(1)&lt;/object&gt; etc. Try it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="inferring-the-polynomial-s-degree-from-the-table"&gt;
&lt;h2&gt;Inferring the polynomial's degree from the table&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Claim:&lt;/strong&gt; if &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt; has degree &lt;em&gt;k&lt;/em&gt;, then the &lt;em&gt;k&lt;/em&gt;-th difference column
in the table is constant.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt; this is a general &lt;em&gt;k&lt;/em&gt;-th degree polynomial with coefficients
&lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/b93e6f239fad8d0444d74634490a6e0e067b8954.svg" style="height: 11px;" type="image/svg+xml"&gt;a_k&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/49c985cb16cfb154ce40e4fbc738712a6f649723.svg" style="height: 22px;" type="image/svg+xml"&gt;\[f(n)=a_k n^k + a_{k-1} n^{k-1} + \cdots + a_1 n + a_0\]&lt;/object&gt;
&lt;p&gt;By definition of the first difference, if we expand the polynomial form and
perform the subtraction per power of &lt;em&gt;n&lt;/em&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/84a9b56982e89d627d41a311f021d7dae2c4938a.svg" style="height: 87px;" type="image/svg+xml"&gt;\[\begin{align*}
  \Delta f(n) &amp;amp;= f(n+1)-f(n) = a_k (n+1)^{k} - a_k n^k + a_{k-1} (n+1)^{k-1} - a_{k-1} n^{k-1}+\cdots \\
              &amp;amp;= \sum_{j=0}^{k} a_j(n+1)^j-a_j n^j
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Using the binomial theorem we know that:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/07156a3c7411c2da37b620fbb22a4b835c53fcfb.svg" style="height: 104px;" type="image/svg+xml"&gt;\[\begin{align*}
(n+1)^j &amp;amp;= \sum_{i=0}^{j} \binom{j}{i}n^{j-i} \cdot 1^{i} \\
        &amp;amp;= n^j + \binom{j}{1}n^{j-1}+\binom{j}{2}n^{j-2}+ \cdots
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Therefore:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/9160683e6cffa23bd374bf3005f43e65dbae8cce.svg" style="height: 43px;" type="image/svg+xml"&gt;\[(n+1)^j - n^j = \binom{j}{1}n^{j-1}+\binom{j}{2}n^{j-2}+ \cdots\]&lt;/object&gt;
&lt;p&gt;Now if we look at the sum we got for &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e2aebbedea1d397bc0f3ea7fe157e95855cabc52.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(n)&lt;/object&gt; again, we'll notice
that in each term, the &lt;em&gt;j&lt;/em&gt;-th power of &lt;em&gt;n&lt;/em&gt; gets canceled out. This means that
the highest power of &lt;em&gt;n&lt;/em&gt; in &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e2aebbedea1d397bc0f3ea7fe157e95855cabc52.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(n)&lt;/object&gt; is going to be &lt;em&gt;k-1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can similarly show that in &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4587a8f8a107fe7ff03102fbe212d11dfb602119.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^2 f(n)&lt;/object&gt;, the highest power
of &lt;em&gt;n&lt;/em&gt; is going to be &lt;em&gt;k-2&lt;/em&gt;. Therefore, the &lt;em&gt;k&lt;/em&gt;-th difference
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/20c595809e47fb8b48d6bc1cc331009539b6aa11.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^k f(n)&lt;/object&gt; will be constant &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/4a4e9e431da45a27bc880a8a1ca44d8b1b9bc143.svg" style="height: 12px;" type="image/svg+xml"&gt;\blacksquare&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;Two observations for extra credit:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Note that the claim goes one way - &lt;em&gt;if&lt;/em&gt; &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt; is a &lt;em&gt;k&lt;/em&gt;-th degree
polynomial, the &lt;em&gt;k&lt;/em&gt;-th difference is constant. What we observe in the table
is the &lt;em&gt;k&lt;/em&gt;-th difference is constant, so can we infer that the function is
a &lt;em&gt;k&lt;/em&gt;-th degree polynomial? Not in the general case! The sequence could be
generated by some higher-degree polynomial, or by a completely different
kind of function. That said, since we assume &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt; is polynomial and
are seeking to find the simplest (lowest degree) one, this inference is
valid.&lt;/li&gt;
&lt;li&gt;Did you notice the equivalence to derivatives of polynomials? The &lt;em&gt;k&lt;/em&gt;-th
difference of a polynomial of degree &lt;em&gt;k&lt;/em&gt; is constant... but the same is true
for the &lt;em&gt;k&lt;/em&gt;-th derivative! This is not by chance - since we have a discrete
domain, differences play largely the same role as derivatives for continuous
functions. This isn't a rigorous proof - but think about the definition of
derivatives (the one with the limit) - what do you get when you take
&lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/6d56447973863053dfb94416852d0392187be5b6.svg" style="height: 13px;" type="image/svg+xml"&gt;\Delta x&lt;/object&gt; (also sometimes called &lt;em&gt;h&lt;/em&gt;) and set it to 1?&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="finding-the-coefficients-with-the-newton-polynomial"&gt;
&lt;h2&gt;Finding the coefficients with the Newton polynomial&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Polynomial_interpolation"&gt;Polynomial interpolation&lt;/a&gt; can fit any N points
(with distinct &lt;em&gt;x&lt;/em&gt; values) with a N-1 degree polynomial. One way of finding such
a polynomial was discovered by Isaac Newton and is called the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Newton_polynomial"&gt;Newton polynomial&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our problem of finding a polynomial that generates a given set of points can
be reduced to this interpolation problem, since we've just figured out the
degree of the generating polynomial! Looking at the difference table, we've
found when the difference becomes constant, and that gives us the polynomial's
degree &lt;em&gt;k&lt;/em&gt;. So all we need is the first &lt;em&gt;k+1&lt;/em&gt; points.&lt;/p&gt;
&lt;p&gt;Here's how to develop the Newton polynomial from scratch; we'll start with the
first few coefficients and will then generalize for any &lt;em&gt;k&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The Newton polynomial for our set of forward differences can be expressed as
follows:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/8986e72a8615d60d63a271921b27ac86f2e8cbd7.svg" style="height: 19px;" type="image/svg+xml"&gt;\[f(n) = b_0 + b_1 n + b_2 n (n-1) + \cdots + b_k n(n-1)(n-2)\cdots (n-k+1)\]&lt;/object&gt;
&lt;p&gt;This polynomial is constructed in a clever way; notice that for any &lt;em&gt;p&lt;/em&gt;, when
we calculate &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/bcc84476cc6a5841b58dda8e57994f3c1f5e225e.svg" style="height: 19px;" type="image/svg+xml"&gt;f(p)&lt;/object&gt; all the elements starting with &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/5e9438c006a97c292f46c16b8f25dde4990d3280.svg" style="height: 18px;" type="image/svg+xml"&gt;b_{p+1}&lt;/object&gt; will be
multiplied by zero and vanish. This helps us determine this polynomial's
coefficients in a gradual manner.&lt;/p&gt;
&lt;p&gt;We'll start with the point &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/96703e3d12513bb33306250114aadebf96461433.svg" style="height: 19px;" type="image/svg+xml"&gt;(0, f(0))&lt;/object&gt;, substituting it into the Newton
polynomial:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/7b9efff8279fe3ddb8aa308a1eedfb728080d9f2.svg" style="height: 19px;" type="image/svg+xml"&gt;\[f(0) = b_0\]&lt;/object&gt;
&lt;p&gt;This gives us the first coefficient &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/2a38c2c0c99a2e9da009fc149ea917276bbbd847.svg" style="height: 15px;" type="image/svg+xml"&gt;b_0&lt;/object&gt;. Next, let's look at
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/b303eb9d4aa35ebf9200e8672e6a87f1d2132c35.svg" style="height: 19px;" type="image/svg+xml"&gt;(1, f(1))&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/788b381cf3eac4de29eac423286ce810063e80de.svg" style="height: 19px;" type="image/svg+xml"&gt;\[f(1) = b_0 + b_1 \cdot 1 = b_0 + b_1\]&lt;/object&gt;
&lt;p&gt;Since we know that &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/6799ba33e6a6f88f516dbec5dac8da3208c87712.svg" style="height: 19px;" type="image/svg+xml"&gt;b_0=f(0)&lt;/object&gt;, we can infer that &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/ecffab1104bbfa1700790488d1592833fd3fc123.svg" style="height: 19px;" type="image/svg+xml"&gt;b_1=f(1)-f(0)&lt;/object&gt;.
Another way to express that is &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4772e72ac67c63e4f75cde07fd0185c2581657d0.svg" style="height: 19px;" type="image/svg+xml"&gt;b_1=\Delta f(0)&lt;/object&gt;.&lt;/p&gt;
&lt;p&gt;Continuing to &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/45af72369888dfa1a11fdc7346a5cc2d32001013.svg" style="height: 19px;" type="image/svg+xml"&gt;(2, f(2))&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/765c6057d2eacc86cc48329a5c11ba27d2899b65.svg" style="height: 72px;" type="image/svg+xml"&gt;\[\begin{align*}
 f(2) &amp;amp;= b_0 + b_1 \cdot 2 + b_2 \cdot 2 \cdot 1 \\
      &amp;amp;= b_0 + 2 b_1 + 2! b_2 \\
      &amp;amp;= f(0) + 2 \Delta f(0) + 2! b_2
\end{align*}\]&lt;/object&gt;
&lt;p&gt;We've substituted the values of &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/2a38c2c0c99a2e9da009fc149ea917276bbbd847.svg" style="height: 15px;" type="image/svg+xml"&gt;b_0&lt;/object&gt; and &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/c7cd24d955e66b8fe5ce45ded69fd98da5c68ba8.svg" style="height: 17px;" type="image/svg+xml"&gt;b_1&lt;/object&gt; that we've found
earlier; let's solve for &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/5c438c10871f01d09b0425b8ddd878e495bf7ff8.svg" style="height: 15px;" type="image/svg+xml"&gt;b_2&lt;/object&gt; now:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/e4a3173cf23501f41b1900321533ef57e4cce580.svg" style="height: 170px;" type="image/svg+xml"&gt;\[\begin{align*}
 b_2 &amp;amp;= \frac{f(2) - f(0) - 2 \Delta f(0)}{2!} \\
     &amp;amp;= \frac{f(2) - f(1) + f(1) - f(0) - 2 \Delta f(1)}{2!} \\
     &amp;amp;= \frac{\Delta f(1) + \Delta f(0) - 2 \Delta f(0)}{2!} \\
     &amp;amp;= \frac{\Delta f(1) - \Delta f(0)}{2!}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;The last line's numerator is - by definition - &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/673fc969775d75c8845c11bf81e042c20012dedf.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^2 f(0)&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/d388e0413c1a96596556e8c123aed73c45dd2e8d.svg" style="height: 39px;" type="image/svg+xml"&gt;\[b_2 = \frac{\Delta^2 f(0)}{2!}\]&lt;/object&gt;
&lt;p&gt;We can keep going with this (feel free to do &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/1d56380c7fc945b51537de66595a5cbbbadd1d70.svg" style="height: 19px;" type="image/svg+xml"&gt;(3, f(3))&lt;/object&gt; as an exercise),
but the emerging generalization is that:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/9e565e1e9470e65eb5df737dfd57248b82e6b22d.svg" style="height: 39px;" type="image/svg+xml"&gt;\[b_i = \frac{\Delta^i f(0)}{i!}\]&lt;/object&gt;
&lt;p&gt;And a concise way to write Newton's polynomial for forward differences is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/3136178faae047dc301b8c8e1f3f3bad4e43f1f9.svg" style="height: 53px;" type="image/svg+xml"&gt;\[f(n) = f(0) + \sum_{i=1}^{k} \frac{\Delta^i f(0)}{i!}g_i(n)\]&lt;/object&gt;
&lt;p&gt;Where &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/cfe177e3e161876e13bc7171b7f0314fdc73a651.svg" style="height: 19px;" type="image/svg+xml"&gt;g_i(n)&lt;/object&gt; is:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/48bb7fa934e5b366190e384edb51b60b29693aaf.svg" style="height: 55px;" type="image/svg+xml"&gt;\[\prod_{j=0}^{i-1} (n-j)\]&lt;/object&gt;
&lt;p&gt;Note that we only use the differences for &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/233b23c15ba8894ccefa4845ae4b1954cc2c0ad7.svg" style="height: 19px;" type="image/svg+xml"&gt;f(0)&lt;/object&gt;, meaning that we need
just the first row of the difference table! Let's try it for the pentagonal
numbers example.&lt;/p&gt;
&lt;p&gt;First, we've determined that &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4587a8f8a107fe7ff03102fbe212d11dfb602119.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^2 f(n)&lt;/object&gt; is a constant, so the degree
of the polynomial is 2. We only need to calculate until &lt;em&gt;i=2&lt;/em&gt; in the sum:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/79edb417f3a560fdb280f2c76f68aa0d32093210.svg" style="height: 39px;" type="image/svg+xml"&gt;\[f(n)=f(0)+\frac{\Delta f(0)}{1!} n + \frac{\Delta^2 f(0)}{2!} n(n-1)\]&lt;/object&gt;
&lt;p&gt;Substituting the values from the difference table we have for &lt;em&gt;n=0&lt;/em&gt;, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/25a6b43d36edb1d8a473a661e93eff0e74ce5370.svg" style="height: 127px;" type="image/svg+xml"&gt;\[\begin{align*}
 f(n)&amp;amp;=0+n+\frac{3}{2}n(n-1) \\
     &amp;amp;=n + \frac{3n^2-3n}{2} \\
     &amp;amp;=\frac{3 n^2}{2} -\frac{n}{2}
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Which is exactly what we expected!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="another-example"&gt;
&lt;h2&gt;Another example&lt;/h2&gt;
&lt;p&gt;Let's work through another example, taking the sequence -8, -12, -6, 16, 60...
We'll start by constructing the difference table:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/c2924d0eb862dbb9fd08ff306c53d4429266ff78.svg" style="height: 126px;" type="image/svg+xml"&gt;\[\begin{matrix}
n &amp;amp; f(n) &amp;amp; \Delta f(n) &amp;amp; \Delta ^2 f(n)  &amp;amp;  \Delta ^3 f(n) \\
0 &amp;amp; -8 &amp;amp; -4 &amp;amp; 10 &amp;amp; 6 \\
1 &amp;amp; -12 &amp;amp; 6 &amp;amp; 16 &amp;amp; 6 \\
2 &amp;amp; -6 &amp;amp; 22 &amp;amp; 22 &amp;amp; \\
3 &amp;amp; 16 &amp;amp; 44 &amp;amp; &amp;amp; \\
4 &amp;amp; 60 &amp;amp;  &amp;amp;  &amp;amp;  \\
\end{matrix}\]&lt;/object&gt;
&lt;p&gt;The difference &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a59fa130d9d0319438e151bf14b2f6536d5db631.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^3 f(n)&lt;/object&gt; appears to be constant, so we can generate
this sequence with a degree 3 polynomial. Let's use the first line of the table
to construct the Newton polynomial for it.&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/39486c9596bdb41b9d4fbf24ab3c66674f187fd9.svg" style="height: 135px;" type="image/svg+xml"&gt;\[\begin{align*}
 f(n)&amp;amp;=f(0)+\frac{\Delta f(0)}{1!} n + \frac{\Delta^2 f(0)}{2!} n(n-1) + \frac{\Delta^3 f(0)}{3!} n(n-1)(n-2)\\
     &amp;amp;= -8 + \frac{-4}{1}n + \frac{10}{2}n(n-1) + \frac{6}{6}n(n-1)(n-2) \\
     &amp;amp;= -8-4n+5n^2-5n+n^3-3n^2+2n \\
     &amp;amp;= n^3+2n^2-7n-8
\end{align*}\]&lt;/object&gt;
&lt;p&gt;Verifying that this polynomial generates our sequence as its first 5 elements
is an easy exercise.&lt;/p&gt;
&lt;p&gt;Note that given 5 elements, we can always find a 4th-degree polynomial fitting
it. Here we found a 3rd-degree one, though, leveraging the technique of
differences. This becomes more acute if we have more elements in the sequence -
using differences it's often possible to find significantly simpler polynomials.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recap"&gt;
&lt;h2&gt;Recap&lt;/h2&gt;
&lt;p&gt;For an integer sequence, if this sequence is generated by a polynomial we can
figure out which polynomial it is - given enough elements. We start by
constructing a difference table and noticing if a column becomes constant from
some point on. This tells us the degree of the generating polynomial. With that
in hand, we can use the Newton polynomial to discover a polynomial that
generates the sequence.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="resources"&gt;
&lt;h2&gt;Resources&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ztoz.blog/posts/method-differences/"&gt;This blog post&lt;/a&gt; was the
original inspiration. The post explains how
Babbage's difference engine worked, and makes off-hand remarks like &amp;quot;for
a 2nd degree polynomial, we only need up to the second difference to know
everything&amp;quot;. &lt;a class="reference external" href="https://ztoz.blog/posts/differences-applications/"&gt;This follow-up by the same author&lt;/a&gt;
mentioned going from sequences back to polynomials.&lt;/li&gt;
&lt;li&gt;The old &lt;a class="reference external" href="https://oeis.org/EIStext.pdf"&gt;Encyclopedia of integer sequences&lt;/a&gt;
has an intriguing section 2.5, which unfortunately presents several lemmas
with no proofs.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://brilliant.org/wiki/method-of-differences/"&gt;This wiki page from brilliant.org&lt;/a&gt;
is the best single resource, though its proof of constructing the Newton
polynomial is lacking, IMHO.&lt;/li&gt;
&lt;li&gt;Wikipedia:
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Divided_differences"&gt;Divided differences&lt;/a&gt;
and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Newton_polynomial"&gt;Newton polynomial&lt;/a&gt;
pages.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.youtube.com/watch?v=xd7V0OKkEEg"&gt;Newton's forward differences YouTube lecture&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Knuth covers this &lt;em&gt;very briefly&lt;/em&gt; in section 4.6.4 of Part 2 of TAOCP,
relegating the derivation of the Newton polynomial to an exercise that has
a terse solution.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="appendix-another-way-to-find-the-polynomial-s-coefficients"&gt;
&lt;h2&gt;Appendix: Another way to find the polynomial's coefficients&lt;/h2&gt;
&lt;p&gt;Here's another way to discover the coefficients of the polynomial; the following
discusses the coefficients of the highest power, but can be generalized to
other powers as well. Using Newton's polynomial is simpler, though, so this
is just an appendix for some extra practice in manipulating such polynomials.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Claim:&lt;/strong&gt; if &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt; has degree &lt;em&gt;k&lt;/em&gt;, its coefficient &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/b93e6f239fad8d0444d74634490a6e0e067b8954.svg" style="height: 11px;" type="image/svg+xml"&gt;a_k&lt;/object&gt;
is equal to &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/1f8e42ade75eff67a62076b8124b881e652cc799.svg" style="height: 26px;" type="image/svg+xml"&gt;\frac{\Delta^k f(n)}{k!}&lt;/object&gt;. Since we've proven that
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/20c595809e47fb8b48d6bc1cc331009539b6aa11.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^k f(n)&lt;/object&gt; is a constant, we can find the precise
value of &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/b93e6f239fad8d0444d74634490a6e0e067b8954.svg" style="height: 11px;" type="image/svg+xml"&gt;a_k&lt;/object&gt; this way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Proof:&lt;/strong&gt; Let's go back to the sum formulation of &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e2aebbedea1d397bc0f3ea7fe157e95855cabc52.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(n)&lt;/object&gt; from
the previous proof.&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/17a09986b22f77c6241ff30054322e6cce33da9b.svg" style="height: 56px;" type="image/svg+xml"&gt;\[\sum_{j=0}^{k} a_j(n+1)^j-a_j n^j\]&lt;/object&gt;
&lt;p&gt;Expanding the binomial, we get:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/1f0d1ec102ab7eab83dff4cd8478847ce6ddd450.svg" style="height: 56px;" type="image/svg+xml"&gt;\[\sum_{j=0}^{k} a_j \left [ \binom{j}{1}n^{j-1}+\binom{j}{2}n^{j-2}+ \cdots \right ]\]&lt;/object&gt;
&lt;p&gt;The highest power of &lt;em&gt;n&lt;/em&gt; here is &lt;em&gt;k-1&lt;/em&gt;; its coefficient comes only from the
first term of the binomial expansion for &lt;em&gt;j=k&lt;/em&gt;, and is equal to &lt;object class="valign-m3" data="https://eli.thegreenplace.net/images/math/e192c5d30114375941e53a39e20ffb7ea5d3c971.svg" style="height: 15px;" type="image/svg+xml"&gt;k a_k&lt;/object&gt;.
In order not to deal with long sums, let's just focus on the highest-degree
term in &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/e2aebbedea1d397bc0f3ea7fe157e95855cabc52.svg" style="height: 19px;" type="image/svg+xml"&gt;\Delta f(n)&lt;/object&gt;:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/4890eedc2566f89862ec1917a6fdc4cacbc0ceab.svg" style="height: 22px;" type="image/svg+xml"&gt;\[\Delta f(n) = k a_k n^{k-1} + \gamma\]&lt;/object&gt;
&lt;p&gt;Where &lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/67833ee2012ec1c6254b6c009dc72bf0dc48aa6d.svg" style="height: 12px;" type="image/svg+xml"&gt;\gamma&lt;/object&gt; represents other elements with lower powers of &lt;em&gt;k&lt;/em&gt;, so we
don't care about them for this discussion &lt;a class="footnote-reference" href="#footnote-2" id="footnote-reference-2"&gt;[2]&lt;/a&gt;. Let's move on to the next
difference:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/c8fed37ba44785e2230649048abdc723c1f8cb3e.svg" style="height: 178px;" type="image/svg+xml"&gt;\[\begin{align*}
\Delta^2 f(n) &amp;amp;= \Delta f(n+1) - \Delta f(n) \\
 &amp;amp;= k a_k (n+1)^{k-1} + \gamma_1 - k a_k n^{k-1} + \gamma_2 \\
 &amp;amp;= k a_k \left [ n^{k-1} + \binom{k-1}{1} n^{k-2} + \cdots \right ] - k a_k n^{k-1} + \gamma \\
 &amp;amp;= k a_k \left [ \binom{k-1}{1} n^{k-2} + \cdots \right ] + \gamma \\
 &amp;amp;= k(k-1)a_k n^{k-2} + \gamma
\end{align*}\]&lt;/object&gt;
&lt;p&gt;We've just found the coefficient of the highest power of &lt;em&gt;n&lt;/em&gt; in
&lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/4587a8f8a107fe7ff03102fbe212d11dfb602119.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^2 f(n)&lt;/object&gt;.
It's clear that if we continue doing this, &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/20c595809e47fb8b48d6bc1cc331009539b6aa11.svg" style="height: 20px;" type="image/svg+xml"&gt;\Delta^k f(n)&lt;/object&gt; will be:&lt;/p&gt;
&lt;object class="align-center" data="https://eli.thegreenplace.net/images/math/1e260e31360f67ec73b700fd95039aea2fae707b.svg" style="height: 22px;" type="image/svg+xml"&gt;\[\Delta^k f(n)= a_k k(k-1)(k-2)\cdots 1 = a_k k!\]&lt;/object&gt;
&lt;p&gt;In other words, &lt;object class="valign-m6" data="https://eli.thegreenplace.net/images/math/750c7571c53a8b53e71d1e645f7ae98060742ecc.svg" style="height: 26px;" type="image/svg+xml"&gt;a_k = \frac{\Delta^k f(n)}{k!}&lt;/object&gt;, meaning that we can know
the coefficient of the highest power of &lt;em&gt;n&lt;/em&gt; in &lt;object class="valign-m5" data="https://eli.thegreenplace.net/images/math/a53ffd447bcf898b6cc05d3a4f5cf05db89f6f08.svg" style="height: 19px;" type="image/svg+xml"&gt;f(n)&lt;/object&gt; from the &lt;em&gt;k&lt;/em&gt;-th
difference &lt;object class="valign-0" data="https://eli.thegreenplace.net/images/math/4a4e9e431da45a27bc880a8a1ca44d8b1b9bc143.svg" style="height: 12px;" type="image/svg+xml"&gt;\blacksquare&lt;/object&gt;.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;Naturally, there's an infinitude of potential functions that generate
this sequence; it's more precise to say we're looking for the simplest
(lowest degree)
polynomial that would do this.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-2"&gt;[2]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;In the following calculation, we're playing loose with the
&lt;object class="valign-m4" data="https://eli.thegreenplace.net/images/math/67833ee2012ec1c6254b6c009dc72bf0dc48aa6d.svg" style="height: 12px;" type="image/svg+xml"&gt;\gamma&lt;/object&gt;s to represent &amp;quot;anything with lower powers of &lt;em&gt;n&lt;/em&gt;
that we don't care about&amp;quot;.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
</content><category term="misc"></category><category term="Math"></category></entry><entry><title>Summary of reading: January - March 2024</title><link href="https://eli.thegreenplace.net/2024/summary-of-reading-january-march-2024/" rel="alternate"></link><published>2024-03-31T22:02:00-07:00</published><updated>2024-04-01T12:46:43-07:00</updated><author><name>Eli Bendersky</name></author><id>tag:eli.thegreenplace.net,2024-03-31:/2024/summary-of-reading-january-march-2024/</id><summary type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Lessons in Chemistry: A Novel&amp;quot; by Bonnie Garmus - a research chemist finds
her way in the world following multiple personal tragedies and facing extreme
gender discrimination. I have some mixed feelings about this book. On one hand
it's original, enternaining, well-written and thought provoking. On the
other hand it's full â€¦&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Lessons in Chemistry: A Novel&amp;quot; by Bonnie Garmus - a research chemist finds
her way in the world following multiple personal tragedies and facing extreme
gender discrimination. I have some mixed feelings about this book. On one hand
it's original, enternaining, well-written and thought provoking. On the
other hand it's full of shallow plot twists and extreme characters tuned all
the way to 11. I sort of understand some of this is done on purpose to make a
point, maybe a bit like in &amp;quot;Atlas Shrugged&amp;quot;; that said, this book is here 60
years after the period it tries to cover, so I'm not sure that applies. Oh,
and the dog is certainly my favorite character!&lt;/li&gt;
&lt;li&gt;&amp;quot;Network Effect&amp;quot; by Martha Wells - book 5 of the &amp;quot;Murderbot Diaries&amp;quot; series,
this one a full-length novel. Murderbot and some of his human &amp;quot;clients&amp;quot; go
on another mission, meet old friends and get close to dying - the usual plot.
I found it mostly tedious, because all the original concepts were already
covered in the earlier books. On the other hand, without reading 1-4, this one
would probably be too confusing.&lt;/li&gt;
&lt;li&gt;&amp;quot;Game Over: How Nintendo Conquered The World&amp;quot; David Sheff - the story of
Nintendo, how it evolved from a card-producing family business in 1889 to a
video game empire in the late 20th century. A nice, imformative read, though
having been written in 1993 the book shows its age. It also spends way too
much time on lawsuits and not enough time on the underlying technology, IMO.&lt;/li&gt;
&lt;li&gt;&amp;quot;G-Man: J. Edgar Hooever and the Making of the American Century&amp;quot; by Beverly
Gage - a Pulitzer-winning biography of Hoover; long and detailed. Through
Hoover, this books provides many interesting insights into important events
in the US during the mid 20-th century. Even though the author is clearly
biased, she manages her bias well and tries to keep the writing as objective
as possible overall - this is something I appreciated.&lt;/li&gt;
&lt;li&gt;&amp;quot;The Wager: A Tale of Shipwreck, Mutiny and Murder&amp;quot; by David Grann - the story
of a famous shipwreck of a British man-of-war in Patagonia in the mid-1700s.
I listened to the audiobook and the narrator was somewhat over-dramatic, but
otherwise the book is interesting and enjoyable.&lt;/li&gt;
&lt;li&gt;&amp;quot;On the Banks of Plum Creek&amp;quot; by Laura Ingalls Wilder - the next book in the
&amp;quot;little prairie&amp;quot; series; here Laura and her family live on a farm in
Minnesota, the girls going to school and Pa trying to grow wheat.&lt;/li&gt;
&lt;li&gt;&amp;quot;Salt, Fat, Acid, Heat: Mastering the Elements of Good Cooking&amp;quot; by Samin Nosrat
- the author was a chef in upscale restraurants and then turned to writing
about cooking. This book is not a cookbook in the usual sense - at least half
of it is dedicated to explaining how cooking works. I liked the scientific
explanations - while not too deep, they're really useful. The recipes in
this book are all on the fancy / complicated side but there's a lot of general
knowledge here that is important and can be applied in day-to-day cooking.&lt;/li&gt;
&lt;li&gt;&amp;quot;We've arrived!&amp;quot; by Gregory Khait - (read in Russian) another collection of
short stories focued around Jewish immigrants from the Soviet Union to the
USA.&lt;/li&gt;
&lt;li&gt;&amp;quot;The Warmth of Other Suns: The Epic Story of America's Great Migration&amp;quot; by
Isabel Wilkerson - a glimpse into the migration of black Americans from the
Southern states to the North between WWI and the 1970s. Told through the
stories of three migrants with several detours into other stories. Nice,
informative book.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Re-reads:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;The Log from the Sea of Cortez&amp;quot; by John Steinbeck&lt;/li&gt;
&lt;li&gt;&amp;quot;Shadows of forgotten ancestors&amp;quot; by Carl Sagan&lt;/li&gt;
&lt;li&gt;&amp;quot;Don Quixote&amp;quot; by Miguel Cervantes - found it very tedious this time, barely
managed to finish.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="misc"></category><category term="Book reviews"></category></entry></feed>